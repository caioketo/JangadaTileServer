// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Proto {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Networkmessage {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_Networkmessage__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Networkmessage, global::Networkmessage.Builder> internal__static_Networkmessage__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_LoginPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::LoginPacket, global::LoginPacket.Builder> internal__static_LoginPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Character__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder> internal__static_Character__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CharactersPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CharactersPacket, global::CharactersPacket.Builder> internal__static_CharactersPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_SelectCharacterPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SelectCharacterPacket, global::SelectCharacterPacket.Builder> internal__static_SelectCharacterPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Position__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder> internal__static_Position__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_RequestMovementPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::RequestMovementPacket, global::RequestMovementPacket.Builder> internal__static_RequestMovementPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_AreaDescriptionPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::AreaDescriptionPacket, global::AreaDescriptionPacket.Builder> internal__static_AreaDescriptionPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_TileDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::TileDescription, global::TileDescription.Builder> internal__static_TileDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CreatureRespawnPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CreatureRespawnPacket, global::CreatureRespawnPacket.Builder> internal__static_CreatureRespawnPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CreatureDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CreatureDescription, global::CreatureDescription.Builder> internal__static_CreatureDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerDescription, global::PlayerDescription.Builder> internal__static_PlayerDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_StatsDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::StatsDescription, global::StatsDescription.Builder> internal__static_StatsDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_SkillsDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::SkillsDescription, global::SkillsDescription.Builder> internal__static_SkillsDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerLoginPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerLoginPacket, global::PlayerLoginPacket.Builder> internal__static_PlayerLoginPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerMovementPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerMovementPacket, global::PlayerMovementPacket.Builder> internal__static_PlayerMovementPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_MapSliceDescription__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::MapSliceDescription, global::MapSliceDescription.Builder> internal__static_MapSliceDescription__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CharacterMovementPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CharacterMovementPacket, global::CharacterMovementPacket.Builder> internal__static_CharacterMovementPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_CreatureMovementPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::CreatureMovementPacket, global::CreatureMovementPacket.Builder> internal__static_CreatureMovementPacket__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_Messages__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::Messages, global::Messages.Builder> internal__static_Messages__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_PlayerLogoutPacket__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::PlayerLogoutPacket, global::PlayerLogoutPacket.Builder> internal__static_PlayerLogoutPacket__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static Networkmessage() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChhyZXMvTmV0d29ya21lc3NhZ2UucHJvdG8i3AYKDk5ldHdvcmttZXNzYWdl" + 
          "EiIKBHR5cGUYASACKA4yFC5OZXR3b3JrbWVzc2FnZS5UeXBlEiEKC2xvZ2lu" + 
          "UGFja2V0GAIgASgLMgwuTG9naW5QYWNrZXQSKwoQY2hhcmFjdGVyc1BhY2tl" + 
          "dBgDIAEoCzIRLkNoYXJhY3RlcnNQYWNrZXQSNQoVc2VsZWN0Q2hhcmFjdGVy" + 
          "UGFja2V0GAQgASgLMhYuU2VsZWN0Q2hhcmFjdGVyUGFja2V0EjUKFWFyZWFE" + 
          "ZXNjcmlwdGlvblBhY2tldBgFIAEoCzIWLkFyZWFEZXNjcmlwdGlvblBhY2tl" + 
          "dBI1ChVyZXF1ZXN0TW92ZW1lbnRQYWNrZXQYBiABKAsyFi5SZXF1ZXN0TW92" + 
          "ZW1lbnRQYWNrZXQSMwoUcGxheWVyTW92ZW1lbnRQYWNrZXQYByABKAsyFS5Q" + 
          "bGF5ZXJNb3ZlbWVudFBhY2tldBItChFwbGF5ZXJMb2dpblBhY2tldBgIIAEo" + 
          "CzISLlBsYXllckxvZ2luUGFja2V0EjkKF2NoYXJhY3Rlck1vdmVtZW50UGFj" + 
          "a2V0GAkgASgLMhguQ2hhcmFjdGVyTW92ZW1lbnRQYWNrZXQSLwoScGxheWVy" + 
          "TG9nb3V0UGFja2V0GAogASgLMhMuUGxheWVyTG9nb3V0UGFja2V0EjUKFWNy" + 
          "ZWF0dXJlUmVzcGF3blBhY2tldBgLIAEoCzIWLkNyZWF0dXJlUmVzcGF3blBh" + 
          "Y2tldBI3ChZjcmVhdHVyZU1vdmVtZW50UGFja2V0GAwgASgLMhcuQ3JlYXR1" + 
          "cmVNb3ZlbWVudFBhY2tldCLwAQoEVHlwZRIJCgVMT0dJThAAEg4KCkNIQVJB" + 
          "Q1RFUlMQARIQCgxTRUxFQ1RFRENIQVIQAhIUChBBUkVBX0RFU0NSSVBUSU9O" + 
          "EAMSFAoQUkVRVUVTVF9NT1ZFTUVOVBAEEhMKD1BMQVlFUl9NT1ZFTUVOVBAF" + 
          "EhAKDFBMQVlFUl9MT0dJThAGEhYKEkNIQVJBQ1RFUl9NT1ZFTUVOVBAHEhEK" + 
          "DVBMQVlFUl9MT0dPVVQQCBIUChBDUkVBVFVSRV9SRVNQQVdOEAkSEAoMTk9U" + 
          "X1BPU1NJQkxFEAoSFQoRQ1JFQVRVUkVfTU9WRU1FTlQQCyIuCgtMb2dpblBh" + 
          "Y2tldBINCgVsb2dpbhgBIAIoCRIQCghwYXNzd29yZBgCIAIoCSIzCglDaGFy" + 
          "YWN0ZXISCgoCaWQYASACKAUSDAoEbmFtZRgCIAIoCRIMCgRpbmZvGAMgAigJ" + 
          "IjUKEENoYXJhY3RlcnNQYWNrZXQSIQoNQ2hhcmFjdGVyTGlzdBgBIAMoCzIK" + 
          "LkNoYXJhY3RlciIjChVTZWxlY3RDaGFyYWN0ZXJQYWNrZXQSCgoCaWQYASAC" + 
          "KAUiKwoIUG9zaXRpb24SCQoBeBgBIAIoBRIJCgF5GAIgAigFEgkKAXoYAyAC" + 
          "KAUiiQEKFVJlcXVlc3RNb3ZlbWVudFBhY2tldBI5Cgxtb3ZlbWVudFR5cGUY" + 
          "ASACKA4yIy5SZXF1ZXN0TW92ZW1lbnRQYWNrZXQuTW92ZW1lbnRUeXBlIjUK" + 
          "DE1vdmVtZW50VHlwZRIGCgJVUBABEggKBERPV04QAhIICgRMRUZUEAMSCQoF" + 
          "UklHSFQQBCL5AQoVQXJlYURlc2NyaXB0aW9uUGFja2V0Eg4KBmFyZWFJZBgB" + 
          "IAIoBRINCgV3aWR0aBgCIAIoBRIOCgZoZWlnaHQYAyACKAUSDgoGc3RhcnRY" + 
          "GAQgAigFEg4KBnN0YXJ0WRgFIAIoBRIfCgV0aWxlcxgGIAMoCzIQLlRpbGVE" + 
          "ZXNjcmlwdGlvbhIiCgZwbGF5ZXIYByACKAsyEi5QbGF5ZXJEZXNjcmlwdGlv" + 
          "bhIjCgdwbGF5ZXJzGAggAygLMhIuUGxheWVyRGVzY3JpcHRpb24SJwoJY3Jl" + 
          "YXR1cmVzGAkgAygLMhQuQ3JlYXR1cmVEZXNjcmlwdGlvbiIyCg9UaWxlRGVz" + 
          "Y3JpcHRpb24SEAoIZ3JvdW5kSWQYASACKAUSDQoFaXRlbXMYAiADKAUiSgoV" + 
          "Q3JlYXR1cmVSZXNwYXduUGFja2V0EjEKE2NyZWF0dXJlRGVzY3JpcHRpb24Y" + 
          "ASACKAsyFC5DcmVhdHVyZURlc2NyaXB0aW9uIm4KE0NyZWF0dXJlRGVzY3Jp" + 
          "cHRpb24SFAoMY3JlYXR1cmVHdWlkGAEgAigJEg4KBnRleHRJZBgCIAIoBRIj" + 
          "ChBjcmVhdHVyZVBvc2l0aW9uGAMgAigLMgkuUG9zaXRpb24SDAoEbmFtZRgE" + 
          "IAIoCSJnChFQbGF5ZXJEZXNjcmlwdGlvbhISCgpwbGF5ZXJHdWlkGAEgAigJ" + 
          "EgwKBG5hbWUYAiACKAkSIQoOcGxheWVyUG9zaXRpb24YAyACKAsyCS5Qb3Np" + 
          "dGlvbhINCgVzcGVlZBgEIAIoBSJsChBTdGF0c0Rlc2NyaXB0aW9uEgwKBENP" + 
          "TlMYASACKAUSCwoDU1RSGAIgAigFEgsKA0lOVBgDIAIoBRILCgNXSVMYBCAC" + 
          "KAUSCwoDREVYGAUgAigFEgoKAkhQGAYgAigFEgoKAk1QGAcgAigFImoKEVNr" + 
          "aWxsc0Rlc2NyaXB0aW9uEgwKBE5hbWUYASACKAkSEQoJVGV4dHVyZUlkGAIg" + 
          "AigFEhAKCENvb2xEb3duGAMgAigCEhAKCERpc3RhbmNlGAQgAigCEhAKCEF1" + 
          "dG9DYXN0GAUgAigIIjcKEVBsYXllckxvZ2luUGFja2V0EiIKBnBsYXllchgB" + 
          "IAIoCzISLlBsYXllckRlc2NyaXB0aW9uIl4KFFBsYXllck1vdmVtZW50UGFj" + 
          "a2V0Eh4KC25ld1Bvc2l0aW9uGAEgAigLMgkuUG9zaXRpb24SJgoIbWFwU2xp" + 
          "Y2UYAiACKAsyFC5NYXBTbGljZURlc2NyaXB0aW9uInIKE01hcFNsaWNlRGVz" + 
          "Y3JpcHRpb24SDgoGc3RhcnRYGAEgAigFEgwKBGVuZFgYAiACKAUSDgoGc3Rh" + 
          "cnRZGAMgAigFEgwKBGVuZFkYBCACKAUSHwoFdGlsZXMYBSADKAsyEC5UaWxl" + 
          "RGVzY3JpcHRpb24iPQoXQ2hhcmFjdGVyTW92ZW1lbnRQYWNrZXQSIgoGcGxh" + 
          "eWVyGAEgAigLMhIuUGxheWVyRGVzY3JpcHRpb24iQAoWQ3JlYXR1cmVNb3Zl" + 
          "bWVudFBhY2tldBImCghjcmVhdHVyZRgBIAIoCzIULkNyZWF0dXJlRGVzY3Jp" + 
          "cHRpb24iMwoITWVzc2FnZXMSJwoOTmV0d29ya21lc3NhZ2UYASADKAsyDy5O" + 
          "ZXR3b3JrbWVzc2FnZSIoChJQbGF5ZXJMb2dvdXRQYWNrZXQSEgoKcGxheWVy" + 
          "R3VpZBgBIAIoCQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_Networkmessage__Descriptor = Descriptor.MessageTypes[0];
        internal__static_Networkmessage__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Networkmessage, global::Networkmessage.Builder>(internal__static_Networkmessage__Descriptor,
                new string[] { "Type", "LoginPacket", "CharactersPacket", "SelectCharacterPacket", "AreaDescriptionPacket", "RequestMovementPacket", "PlayerMovementPacket", "PlayerLoginPacket", "CharacterMovementPacket", "PlayerLogoutPacket", "CreatureRespawnPacket", "CreatureMovementPacket", });
        internal__static_LoginPacket__Descriptor = Descriptor.MessageTypes[1];
        internal__static_LoginPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::LoginPacket, global::LoginPacket.Builder>(internal__static_LoginPacket__Descriptor,
                new string[] { "Login", "Password", });
        internal__static_Character__Descriptor = Descriptor.MessageTypes[2];
        internal__static_Character__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder>(internal__static_Character__Descriptor,
                new string[] { "Id", "Name", "Info", });
        internal__static_CharactersPacket__Descriptor = Descriptor.MessageTypes[3];
        internal__static_CharactersPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CharactersPacket, global::CharactersPacket.Builder>(internal__static_CharactersPacket__Descriptor,
                new string[] { "CharacterList", });
        internal__static_SelectCharacterPacket__Descriptor = Descriptor.MessageTypes[4];
        internal__static_SelectCharacterPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SelectCharacterPacket, global::SelectCharacterPacket.Builder>(internal__static_SelectCharacterPacket__Descriptor,
                new string[] { "Id", });
        internal__static_Position__Descriptor = Descriptor.MessageTypes[5];
        internal__static_Position__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder>(internal__static_Position__Descriptor,
                new string[] { "X", "Y", "Z", });
        internal__static_RequestMovementPacket__Descriptor = Descriptor.MessageTypes[6];
        internal__static_RequestMovementPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::RequestMovementPacket, global::RequestMovementPacket.Builder>(internal__static_RequestMovementPacket__Descriptor,
                new string[] { "MovementType", });
        internal__static_AreaDescriptionPacket__Descriptor = Descriptor.MessageTypes[7];
        internal__static_AreaDescriptionPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::AreaDescriptionPacket, global::AreaDescriptionPacket.Builder>(internal__static_AreaDescriptionPacket__Descriptor,
                new string[] { "AreaId", "Width", "Height", "StartX", "StartY", "Tiles", "Player", "Players", "Creatures", });
        internal__static_TileDescription__Descriptor = Descriptor.MessageTypes[8];
        internal__static_TileDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::TileDescription, global::TileDescription.Builder>(internal__static_TileDescription__Descriptor,
                new string[] { "GroundId", "Items", });
        internal__static_CreatureRespawnPacket__Descriptor = Descriptor.MessageTypes[9];
        internal__static_CreatureRespawnPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CreatureRespawnPacket, global::CreatureRespawnPacket.Builder>(internal__static_CreatureRespawnPacket__Descriptor,
                new string[] { "CreatureDescription", });
        internal__static_CreatureDescription__Descriptor = Descriptor.MessageTypes[10];
        internal__static_CreatureDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CreatureDescription, global::CreatureDescription.Builder>(internal__static_CreatureDescription__Descriptor,
                new string[] { "CreatureGuid", "TextId", "CreaturePosition", "Name", });
        internal__static_PlayerDescription__Descriptor = Descriptor.MessageTypes[11];
        internal__static_PlayerDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerDescription, global::PlayerDescription.Builder>(internal__static_PlayerDescription__Descriptor,
                new string[] { "PlayerGuid", "Name", "PlayerPosition", "Speed", });
        internal__static_StatsDescription__Descriptor = Descriptor.MessageTypes[12];
        internal__static_StatsDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::StatsDescription, global::StatsDescription.Builder>(internal__static_StatsDescription__Descriptor,
                new string[] { "CONS", "STR", "INT", "WIS", "DEX", "HP", "MP", });
        internal__static_SkillsDescription__Descriptor = Descriptor.MessageTypes[13];
        internal__static_SkillsDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::SkillsDescription, global::SkillsDescription.Builder>(internal__static_SkillsDescription__Descriptor,
                new string[] { "Name", "TextureId", "CoolDown", "Distance", "AutoCast", });
        internal__static_PlayerLoginPacket__Descriptor = Descriptor.MessageTypes[14];
        internal__static_PlayerLoginPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerLoginPacket, global::PlayerLoginPacket.Builder>(internal__static_PlayerLoginPacket__Descriptor,
                new string[] { "Player", });
        internal__static_PlayerMovementPacket__Descriptor = Descriptor.MessageTypes[15];
        internal__static_PlayerMovementPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerMovementPacket, global::PlayerMovementPacket.Builder>(internal__static_PlayerMovementPacket__Descriptor,
                new string[] { "NewPosition", "MapSlice", });
        internal__static_MapSliceDescription__Descriptor = Descriptor.MessageTypes[16];
        internal__static_MapSliceDescription__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::MapSliceDescription, global::MapSliceDescription.Builder>(internal__static_MapSliceDescription__Descriptor,
                new string[] { "StartX", "EndX", "StartY", "EndY", "Tiles", });
        internal__static_CharacterMovementPacket__Descriptor = Descriptor.MessageTypes[17];
        internal__static_CharacterMovementPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CharacterMovementPacket, global::CharacterMovementPacket.Builder>(internal__static_CharacterMovementPacket__Descriptor,
                new string[] { "Player", });
        internal__static_CreatureMovementPacket__Descriptor = Descriptor.MessageTypes[18];
        internal__static_CreatureMovementPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::CreatureMovementPacket, global::CreatureMovementPacket.Builder>(internal__static_CreatureMovementPacket__Descriptor,
                new string[] { "Creature", });
        internal__static_Messages__Descriptor = Descriptor.MessageTypes[19];
        internal__static_Messages__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::Messages, global::Messages.Builder>(internal__static_Messages__Descriptor,
                new string[] { "Networkmessage", });
        internal__static_PlayerLogoutPacket__Descriptor = Descriptor.MessageTypes[20];
        internal__static_PlayerLogoutPacket__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::PlayerLogoutPacket, global::PlayerLogoutPacket.Builder>(internal__static_PlayerLogoutPacket__Descriptor,
                new string[] { "PlayerGuid", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Networkmessage : pb::GeneratedMessage<Networkmessage, Networkmessage.Builder> {
  private Networkmessage() { }
  private static readonly Networkmessage defaultInstance = new Networkmessage().MakeReadOnly();
  private static readonly string[] _networkmessageFieldNames = new string[] { "areaDescriptionPacket", "characterMovementPacket", "charactersPacket", "creatureMovementPacket", "creatureRespawnPacket", "loginPacket", "playerLoginPacket", "playerLogoutPacket", "playerMovementPacket", "requestMovementPacket", "selectCharacterPacket", "type" };
  private static readonly uint[] _networkmessageFieldTags = new uint[] { 42, 74, 26, 98, 90, 18, 66, 82, 58, 50, 34, 8 };
  public static Networkmessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Networkmessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Networkmessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_Networkmessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Networkmessage, Networkmessage.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_Networkmessage__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum Type {
      LOGIN = 0,
      CHARACTERS = 1,
      SELECTEDCHAR = 2,
      AREA_DESCRIPTION = 3,
      REQUEST_MOVEMENT = 4,
      PLAYER_MOVEMENT = 5,
      PLAYER_LOGIN = 6,
      CHARACTER_MOVEMENT = 7,
      PLAYER_LOGOUT = 8,
      CREATURE_RESPAWN = 9,
      NOT_POSSIBLE = 10,
      CREATURE_MOVEMENT = 11,
    }
    
  }
  #endregion
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private global::Networkmessage.Types.Type type_ = global::Networkmessage.Types.Type.LOGIN;
  public bool HasType {
    get { return hasType; }
  }
  public global::Networkmessage.Types.Type Type {
    get { return type_; }
  }
  
  public const int LoginPacketFieldNumber = 2;
  private bool hasLoginPacket;
  private global::LoginPacket loginPacket_;
  public bool HasLoginPacket {
    get { return hasLoginPacket; }
  }
  public global::LoginPacket LoginPacket {
    get { return loginPacket_ ?? global::LoginPacket.DefaultInstance; }
  }
  
  public const int CharactersPacketFieldNumber = 3;
  private bool hasCharactersPacket;
  private global::CharactersPacket charactersPacket_;
  public bool HasCharactersPacket {
    get { return hasCharactersPacket; }
  }
  public global::CharactersPacket CharactersPacket {
    get { return charactersPacket_ ?? global::CharactersPacket.DefaultInstance; }
  }
  
  public const int SelectCharacterPacketFieldNumber = 4;
  private bool hasSelectCharacterPacket;
  private global::SelectCharacterPacket selectCharacterPacket_;
  public bool HasSelectCharacterPacket {
    get { return hasSelectCharacterPacket; }
  }
  public global::SelectCharacterPacket SelectCharacterPacket {
    get { return selectCharacterPacket_ ?? global::SelectCharacterPacket.DefaultInstance; }
  }
  
  public const int AreaDescriptionPacketFieldNumber = 5;
  private bool hasAreaDescriptionPacket;
  private global::AreaDescriptionPacket areaDescriptionPacket_;
  public bool HasAreaDescriptionPacket {
    get { return hasAreaDescriptionPacket; }
  }
  public global::AreaDescriptionPacket AreaDescriptionPacket {
    get { return areaDescriptionPacket_ ?? global::AreaDescriptionPacket.DefaultInstance; }
  }
  
  public const int RequestMovementPacketFieldNumber = 6;
  private bool hasRequestMovementPacket;
  private global::RequestMovementPacket requestMovementPacket_;
  public bool HasRequestMovementPacket {
    get { return hasRequestMovementPacket; }
  }
  public global::RequestMovementPacket RequestMovementPacket {
    get { return requestMovementPacket_ ?? global::RequestMovementPacket.DefaultInstance; }
  }
  
  public const int PlayerMovementPacketFieldNumber = 7;
  private bool hasPlayerMovementPacket;
  private global::PlayerMovementPacket playerMovementPacket_;
  public bool HasPlayerMovementPacket {
    get { return hasPlayerMovementPacket; }
  }
  public global::PlayerMovementPacket PlayerMovementPacket {
    get { return playerMovementPacket_ ?? global::PlayerMovementPacket.DefaultInstance; }
  }
  
  public const int PlayerLoginPacketFieldNumber = 8;
  private bool hasPlayerLoginPacket;
  private global::PlayerLoginPacket playerLoginPacket_;
  public bool HasPlayerLoginPacket {
    get { return hasPlayerLoginPacket; }
  }
  public global::PlayerLoginPacket PlayerLoginPacket {
    get { return playerLoginPacket_ ?? global::PlayerLoginPacket.DefaultInstance; }
  }
  
  public const int CharacterMovementPacketFieldNumber = 9;
  private bool hasCharacterMovementPacket;
  private global::CharacterMovementPacket characterMovementPacket_;
  public bool HasCharacterMovementPacket {
    get { return hasCharacterMovementPacket; }
  }
  public global::CharacterMovementPacket CharacterMovementPacket {
    get { return characterMovementPacket_ ?? global::CharacterMovementPacket.DefaultInstance; }
  }
  
  public const int PlayerLogoutPacketFieldNumber = 10;
  private bool hasPlayerLogoutPacket;
  private global::PlayerLogoutPacket playerLogoutPacket_;
  public bool HasPlayerLogoutPacket {
    get { return hasPlayerLogoutPacket; }
  }
  public global::PlayerLogoutPacket PlayerLogoutPacket {
    get { return playerLogoutPacket_ ?? global::PlayerLogoutPacket.DefaultInstance; }
  }
  
  public const int CreatureRespawnPacketFieldNumber = 11;
  private bool hasCreatureRespawnPacket;
  private global::CreatureRespawnPacket creatureRespawnPacket_;
  public bool HasCreatureRespawnPacket {
    get { return hasCreatureRespawnPacket; }
  }
  public global::CreatureRespawnPacket CreatureRespawnPacket {
    get { return creatureRespawnPacket_ ?? global::CreatureRespawnPacket.DefaultInstance; }
  }
  
  public const int CreatureMovementPacketFieldNumber = 12;
  private bool hasCreatureMovementPacket;
  private global::CreatureMovementPacket creatureMovementPacket_;
  public bool HasCreatureMovementPacket {
    get { return hasCreatureMovementPacket; }
  }
  public global::CreatureMovementPacket CreatureMovementPacket {
    get { return creatureMovementPacket_ ?? global::CreatureMovementPacket.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasType) return false;
      if (HasLoginPacket) {
        if (!LoginPacket.IsInitialized) return false;
      }
      if (HasCharactersPacket) {
        if (!CharactersPacket.IsInitialized) return false;
      }
      if (HasSelectCharacterPacket) {
        if (!SelectCharacterPacket.IsInitialized) return false;
      }
      if (HasAreaDescriptionPacket) {
        if (!AreaDescriptionPacket.IsInitialized) return false;
      }
      if (HasRequestMovementPacket) {
        if (!RequestMovementPacket.IsInitialized) return false;
      }
      if (HasPlayerMovementPacket) {
        if (!PlayerMovementPacket.IsInitialized) return false;
      }
      if (HasPlayerLoginPacket) {
        if (!PlayerLoginPacket.IsInitialized) return false;
      }
      if (HasCharacterMovementPacket) {
        if (!CharacterMovementPacket.IsInitialized) return false;
      }
      if (HasPlayerLogoutPacket) {
        if (!PlayerLogoutPacket.IsInitialized) return false;
      }
      if (HasCreatureRespawnPacket) {
        if (!CreatureRespawnPacket.IsInitialized) return false;
      }
      if (HasCreatureMovementPacket) {
        if (!CreatureMovementPacket.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _networkmessageFieldNames;
    if (hasType) {
      output.WriteEnum(1, field_names[11], (int) Type, Type);
    }
    if (hasLoginPacket) {
      output.WriteMessage(2, field_names[5], LoginPacket);
    }
    if (hasCharactersPacket) {
      output.WriteMessage(3, field_names[2], CharactersPacket);
    }
    if (hasSelectCharacterPacket) {
      output.WriteMessage(4, field_names[10], SelectCharacterPacket);
    }
    if (hasAreaDescriptionPacket) {
      output.WriteMessage(5, field_names[0], AreaDescriptionPacket);
    }
    if (hasRequestMovementPacket) {
      output.WriteMessage(6, field_names[9], RequestMovementPacket);
    }
    if (hasPlayerMovementPacket) {
      output.WriteMessage(7, field_names[8], PlayerMovementPacket);
    }
    if (hasPlayerLoginPacket) {
      output.WriteMessage(8, field_names[6], PlayerLoginPacket);
    }
    if (hasCharacterMovementPacket) {
      output.WriteMessage(9, field_names[1], CharacterMovementPacket);
    }
    if (hasPlayerLogoutPacket) {
      output.WriteMessage(10, field_names[7], PlayerLogoutPacket);
    }
    if (hasCreatureRespawnPacket) {
      output.WriteMessage(11, field_names[4], CreatureRespawnPacket);
    }
    if (hasCreatureMovementPacket) {
      output.WriteMessage(12, field_names[3], CreatureMovementPacket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasLoginPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, LoginPacket);
      }
      if (hasCharactersPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, CharactersPacket);
      }
      if (hasSelectCharacterPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SelectCharacterPacket);
      }
      if (hasAreaDescriptionPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, AreaDescriptionPacket);
      }
      if (hasRequestMovementPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, RequestMovementPacket);
      }
      if (hasPlayerMovementPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, PlayerMovementPacket);
      }
      if (hasPlayerLoginPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, PlayerLoginPacket);
      }
      if (hasCharacterMovementPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, CharacterMovementPacket);
      }
      if (hasPlayerLogoutPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, PlayerLogoutPacket);
      }
      if (hasCreatureRespawnPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, CreatureRespawnPacket);
      }
      if (hasCreatureMovementPacket) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, CreatureMovementPacket);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Networkmessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Networkmessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Networkmessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Networkmessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Networkmessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Networkmessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Networkmessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Networkmessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Networkmessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Networkmessage MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Networkmessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Networkmessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Networkmessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Networkmessage result;
    
    private Networkmessage PrepareBuilder() {
      if (resultIsReadOnly) {
        Networkmessage original = result;
        result = new Networkmessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Networkmessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Networkmessage.Descriptor; }
    }
    
    public override Networkmessage DefaultInstanceForType {
      get { return global::Networkmessage.DefaultInstance; }
    }
    
    public override Networkmessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Networkmessage) {
        return MergeFrom((Networkmessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Networkmessage other) {
      if (other == global::Networkmessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasLoginPacket) {
        MergeLoginPacket(other.LoginPacket);
      }
      if (other.HasCharactersPacket) {
        MergeCharactersPacket(other.CharactersPacket);
      }
      if (other.HasSelectCharacterPacket) {
        MergeSelectCharacterPacket(other.SelectCharacterPacket);
      }
      if (other.HasAreaDescriptionPacket) {
        MergeAreaDescriptionPacket(other.AreaDescriptionPacket);
      }
      if (other.HasRequestMovementPacket) {
        MergeRequestMovementPacket(other.RequestMovementPacket);
      }
      if (other.HasPlayerMovementPacket) {
        MergePlayerMovementPacket(other.PlayerMovementPacket);
      }
      if (other.HasPlayerLoginPacket) {
        MergePlayerLoginPacket(other.PlayerLoginPacket);
      }
      if (other.HasCharacterMovementPacket) {
        MergeCharacterMovementPacket(other.CharacterMovementPacket);
      }
      if (other.HasPlayerLogoutPacket) {
        MergePlayerLogoutPacket(other.PlayerLogoutPacket);
      }
      if (other.HasCreatureRespawnPacket) {
        MergeCreatureRespawnPacket(other.CreatureRespawnPacket);
      }
      if (other.HasCreatureMovementPacket) {
        MergeCreatureMovementPacket(other.CreatureMovementPacket);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_networkmessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _networkmessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 18: {
            global::LoginPacket.Builder subBuilder = global::LoginPacket.CreateBuilder();
            if (result.hasLoginPacket) {
              subBuilder.MergeFrom(LoginPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LoginPacket = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::CharactersPacket.Builder subBuilder = global::CharactersPacket.CreateBuilder();
            if (result.hasCharactersPacket) {
              subBuilder.MergeFrom(CharactersPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CharactersPacket = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::SelectCharacterPacket.Builder subBuilder = global::SelectCharacterPacket.CreateBuilder();
            if (result.hasSelectCharacterPacket) {
              subBuilder.MergeFrom(SelectCharacterPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            SelectCharacterPacket = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            global::AreaDescriptionPacket.Builder subBuilder = global::AreaDescriptionPacket.CreateBuilder();
            if (result.hasAreaDescriptionPacket) {
              subBuilder.MergeFrom(AreaDescriptionPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            AreaDescriptionPacket = subBuilder.BuildPartial();
            break;
          }
          case 50: {
            global::RequestMovementPacket.Builder subBuilder = global::RequestMovementPacket.CreateBuilder();
            if (result.hasRequestMovementPacket) {
              subBuilder.MergeFrom(RequestMovementPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            RequestMovementPacket = subBuilder.BuildPartial();
            break;
          }
          case 58: {
            global::PlayerMovementPacket.Builder subBuilder = global::PlayerMovementPacket.CreateBuilder();
            if (result.hasPlayerMovementPacket) {
              subBuilder.MergeFrom(PlayerMovementPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerMovementPacket = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::PlayerLoginPacket.Builder subBuilder = global::PlayerLoginPacket.CreateBuilder();
            if (result.hasPlayerLoginPacket) {
              subBuilder.MergeFrom(PlayerLoginPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerLoginPacket = subBuilder.BuildPartial();
            break;
          }
          case 74: {
            global::CharacterMovementPacket.Builder subBuilder = global::CharacterMovementPacket.CreateBuilder();
            if (result.hasCharacterMovementPacket) {
              subBuilder.MergeFrom(CharacterMovementPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CharacterMovementPacket = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::PlayerLogoutPacket.Builder subBuilder = global::PlayerLogoutPacket.CreateBuilder();
            if (result.hasPlayerLogoutPacket) {
              subBuilder.MergeFrom(PlayerLogoutPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerLogoutPacket = subBuilder.BuildPartial();
            break;
          }
          case 90: {
            global::CreatureRespawnPacket.Builder subBuilder = global::CreatureRespawnPacket.CreateBuilder();
            if (result.hasCreatureRespawnPacket) {
              subBuilder.MergeFrom(CreatureRespawnPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CreatureRespawnPacket = subBuilder.BuildPartial();
            break;
          }
          case 98: {
            global::CreatureMovementPacket.Builder subBuilder = global::CreatureMovementPacket.CreateBuilder();
            if (result.hasCreatureMovementPacket) {
              subBuilder.MergeFrom(CreatureMovementPacket);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CreatureMovementPacket = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::Networkmessage.Types.Type Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::Networkmessage.Types.Type value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::Networkmessage.Types.Type.LOGIN;
      return this;
    }
    
    public bool HasLoginPacket {
     get { return result.hasLoginPacket; }
    }
    public global::LoginPacket LoginPacket {
      get { return result.LoginPacket; }
      set { SetLoginPacket(value); }
    }
    public Builder SetLoginPacket(global::LoginPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLoginPacket = true;
      result.loginPacket_ = value;
      return this;
    }
    public Builder SetLoginPacket(global::LoginPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLoginPacket = true;
      result.loginPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLoginPacket(global::LoginPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLoginPacket &&
          result.loginPacket_ != global::LoginPacket.DefaultInstance) {
          result.loginPacket_ = global::LoginPacket.CreateBuilder(result.loginPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.loginPacket_ = value;
      }
      result.hasLoginPacket = true;
      return this;
    }
    public Builder ClearLoginPacket() {
      PrepareBuilder();
      result.hasLoginPacket = false;
      result.loginPacket_ = null;
      return this;
    }
    
    public bool HasCharactersPacket {
     get { return result.hasCharactersPacket; }
    }
    public global::CharactersPacket CharactersPacket {
      get { return result.CharactersPacket; }
      set { SetCharactersPacket(value); }
    }
    public Builder SetCharactersPacket(global::CharactersPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCharactersPacket = true;
      result.charactersPacket_ = value;
      return this;
    }
    public Builder SetCharactersPacket(global::CharactersPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCharactersPacket = true;
      result.charactersPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCharactersPacket(global::CharactersPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCharactersPacket &&
          result.charactersPacket_ != global::CharactersPacket.DefaultInstance) {
          result.charactersPacket_ = global::CharactersPacket.CreateBuilder(result.charactersPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.charactersPacket_ = value;
      }
      result.hasCharactersPacket = true;
      return this;
    }
    public Builder ClearCharactersPacket() {
      PrepareBuilder();
      result.hasCharactersPacket = false;
      result.charactersPacket_ = null;
      return this;
    }
    
    public bool HasSelectCharacterPacket {
     get { return result.hasSelectCharacterPacket; }
    }
    public global::SelectCharacterPacket SelectCharacterPacket {
      get { return result.SelectCharacterPacket; }
      set { SetSelectCharacterPacket(value); }
    }
    public Builder SetSelectCharacterPacket(global::SelectCharacterPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSelectCharacterPacket = true;
      result.selectCharacterPacket_ = value;
      return this;
    }
    public Builder SetSelectCharacterPacket(global::SelectCharacterPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSelectCharacterPacket = true;
      result.selectCharacterPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSelectCharacterPacket(global::SelectCharacterPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSelectCharacterPacket &&
          result.selectCharacterPacket_ != global::SelectCharacterPacket.DefaultInstance) {
          result.selectCharacterPacket_ = global::SelectCharacterPacket.CreateBuilder(result.selectCharacterPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.selectCharacterPacket_ = value;
      }
      result.hasSelectCharacterPacket = true;
      return this;
    }
    public Builder ClearSelectCharacterPacket() {
      PrepareBuilder();
      result.hasSelectCharacterPacket = false;
      result.selectCharacterPacket_ = null;
      return this;
    }
    
    public bool HasAreaDescriptionPacket {
     get { return result.hasAreaDescriptionPacket; }
    }
    public global::AreaDescriptionPacket AreaDescriptionPacket {
      get { return result.AreaDescriptionPacket; }
      set { SetAreaDescriptionPacket(value); }
    }
    public Builder SetAreaDescriptionPacket(global::AreaDescriptionPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAreaDescriptionPacket = true;
      result.areaDescriptionPacket_ = value;
      return this;
    }
    public Builder SetAreaDescriptionPacket(global::AreaDescriptionPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAreaDescriptionPacket = true;
      result.areaDescriptionPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAreaDescriptionPacket(global::AreaDescriptionPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAreaDescriptionPacket &&
          result.areaDescriptionPacket_ != global::AreaDescriptionPacket.DefaultInstance) {
          result.areaDescriptionPacket_ = global::AreaDescriptionPacket.CreateBuilder(result.areaDescriptionPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.areaDescriptionPacket_ = value;
      }
      result.hasAreaDescriptionPacket = true;
      return this;
    }
    public Builder ClearAreaDescriptionPacket() {
      PrepareBuilder();
      result.hasAreaDescriptionPacket = false;
      result.areaDescriptionPacket_ = null;
      return this;
    }
    
    public bool HasRequestMovementPacket {
     get { return result.hasRequestMovementPacket; }
    }
    public global::RequestMovementPacket RequestMovementPacket {
      get { return result.RequestMovementPacket; }
      set { SetRequestMovementPacket(value); }
    }
    public Builder SetRequestMovementPacket(global::RequestMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRequestMovementPacket = true;
      result.requestMovementPacket_ = value;
      return this;
    }
    public Builder SetRequestMovementPacket(global::RequestMovementPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRequestMovementPacket = true;
      result.requestMovementPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRequestMovementPacket(global::RequestMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRequestMovementPacket &&
          result.requestMovementPacket_ != global::RequestMovementPacket.DefaultInstance) {
          result.requestMovementPacket_ = global::RequestMovementPacket.CreateBuilder(result.requestMovementPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.requestMovementPacket_ = value;
      }
      result.hasRequestMovementPacket = true;
      return this;
    }
    public Builder ClearRequestMovementPacket() {
      PrepareBuilder();
      result.hasRequestMovementPacket = false;
      result.requestMovementPacket_ = null;
      return this;
    }
    
    public bool HasPlayerMovementPacket {
     get { return result.hasPlayerMovementPacket; }
    }
    public global::PlayerMovementPacket PlayerMovementPacket {
      get { return result.PlayerMovementPacket; }
      set { SetPlayerMovementPacket(value); }
    }
    public Builder SetPlayerMovementPacket(global::PlayerMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerMovementPacket = true;
      result.playerMovementPacket_ = value;
      return this;
    }
    public Builder SetPlayerMovementPacket(global::PlayerMovementPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerMovementPacket = true;
      result.playerMovementPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerMovementPacket(global::PlayerMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerMovementPacket &&
          result.playerMovementPacket_ != global::PlayerMovementPacket.DefaultInstance) {
          result.playerMovementPacket_ = global::PlayerMovementPacket.CreateBuilder(result.playerMovementPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.playerMovementPacket_ = value;
      }
      result.hasPlayerMovementPacket = true;
      return this;
    }
    public Builder ClearPlayerMovementPacket() {
      PrepareBuilder();
      result.hasPlayerMovementPacket = false;
      result.playerMovementPacket_ = null;
      return this;
    }
    
    public bool HasPlayerLoginPacket {
     get { return result.hasPlayerLoginPacket; }
    }
    public global::PlayerLoginPacket PlayerLoginPacket {
      get { return result.PlayerLoginPacket; }
      set { SetPlayerLoginPacket(value); }
    }
    public Builder SetPlayerLoginPacket(global::PlayerLoginPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerLoginPacket = true;
      result.playerLoginPacket_ = value;
      return this;
    }
    public Builder SetPlayerLoginPacket(global::PlayerLoginPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerLoginPacket = true;
      result.playerLoginPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerLoginPacket(global::PlayerLoginPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerLoginPacket &&
          result.playerLoginPacket_ != global::PlayerLoginPacket.DefaultInstance) {
          result.playerLoginPacket_ = global::PlayerLoginPacket.CreateBuilder(result.playerLoginPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.playerLoginPacket_ = value;
      }
      result.hasPlayerLoginPacket = true;
      return this;
    }
    public Builder ClearPlayerLoginPacket() {
      PrepareBuilder();
      result.hasPlayerLoginPacket = false;
      result.playerLoginPacket_ = null;
      return this;
    }
    
    public bool HasCharacterMovementPacket {
     get { return result.hasCharacterMovementPacket; }
    }
    public global::CharacterMovementPacket CharacterMovementPacket {
      get { return result.CharacterMovementPacket; }
      set { SetCharacterMovementPacket(value); }
    }
    public Builder SetCharacterMovementPacket(global::CharacterMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCharacterMovementPacket = true;
      result.characterMovementPacket_ = value;
      return this;
    }
    public Builder SetCharacterMovementPacket(global::CharacterMovementPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCharacterMovementPacket = true;
      result.characterMovementPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCharacterMovementPacket(global::CharacterMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCharacterMovementPacket &&
          result.characterMovementPacket_ != global::CharacterMovementPacket.DefaultInstance) {
          result.characterMovementPacket_ = global::CharacterMovementPacket.CreateBuilder(result.characterMovementPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.characterMovementPacket_ = value;
      }
      result.hasCharacterMovementPacket = true;
      return this;
    }
    public Builder ClearCharacterMovementPacket() {
      PrepareBuilder();
      result.hasCharacterMovementPacket = false;
      result.characterMovementPacket_ = null;
      return this;
    }
    
    public bool HasPlayerLogoutPacket {
     get { return result.hasPlayerLogoutPacket; }
    }
    public global::PlayerLogoutPacket PlayerLogoutPacket {
      get { return result.PlayerLogoutPacket; }
      set { SetPlayerLogoutPacket(value); }
    }
    public Builder SetPlayerLogoutPacket(global::PlayerLogoutPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerLogoutPacket = true;
      result.playerLogoutPacket_ = value;
      return this;
    }
    public Builder SetPlayerLogoutPacket(global::PlayerLogoutPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerLogoutPacket = true;
      result.playerLogoutPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerLogoutPacket(global::PlayerLogoutPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerLogoutPacket &&
          result.playerLogoutPacket_ != global::PlayerLogoutPacket.DefaultInstance) {
          result.playerLogoutPacket_ = global::PlayerLogoutPacket.CreateBuilder(result.playerLogoutPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.playerLogoutPacket_ = value;
      }
      result.hasPlayerLogoutPacket = true;
      return this;
    }
    public Builder ClearPlayerLogoutPacket() {
      PrepareBuilder();
      result.hasPlayerLogoutPacket = false;
      result.playerLogoutPacket_ = null;
      return this;
    }
    
    public bool HasCreatureRespawnPacket {
     get { return result.hasCreatureRespawnPacket; }
    }
    public global::CreatureRespawnPacket CreatureRespawnPacket {
      get { return result.CreatureRespawnPacket; }
      set { SetCreatureRespawnPacket(value); }
    }
    public Builder SetCreatureRespawnPacket(global::CreatureRespawnPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreatureRespawnPacket = true;
      result.creatureRespawnPacket_ = value;
      return this;
    }
    public Builder SetCreatureRespawnPacket(global::CreatureRespawnPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCreatureRespawnPacket = true;
      result.creatureRespawnPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCreatureRespawnPacket(global::CreatureRespawnPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCreatureRespawnPacket &&
          result.creatureRespawnPacket_ != global::CreatureRespawnPacket.DefaultInstance) {
          result.creatureRespawnPacket_ = global::CreatureRespawnPacket.CreateBuilder(result.creatureRespawnPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.creatureRespawnPacket_ = value;
      }
      result.hasCreatureRespawnPacket = true;
      return this;
    }
    public Builder ClearCreatureRespawnPacket() {
      PrepareBuilder();
      result.hasCreatureRespawnPacket = false;
      result.creatureRespawnPacket_ = null;
      return this;
    }
    
    public bool HasCreatureMovementPacket {
     get { return result.hasCreatureMovementPacket; }
    }
    public global::CreatureMovementPacket CreatureMovementPacket {
      get { return result.CreatureMovementPacket; }
      set { SetCreatureMovementPacket(value); }
    }
    public Builder SetCreatureMovementPacket(global::CreatureMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreatureMovementPacket = true;
      result.creatureMovementPacket_ = value;
      return this;
    }
    public Builder SetCreatureMovementPacket(global::CreatureMovementPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCreatureMovementPacket = true;
      result.creatureMovementPacket_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCreatureMovementPacket(global::CreatureMovementPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCreatureMovementPacket &&
          result.creatureMovementPacket_ != global::CreatureMovementPacket.DefaultInstance) {
          result.creatureMovementPacket_ = global::CreatureMovementPacket.CreateBuilder(result.creatureMovementPacket_).MergeFrom(value).BuildPartial();
      } else {
        result.creatureMovementPacket_ = value;
      }
      result.hasCreatureMovementPacket = true;
      return this;
    }
    public Builder ClearCreatureMovementPacket() {
      PrepareBuilder();
      result.hasCreatureMovementPacket = false;
      result.creatureMovementPacket_ = null;
      return this;
    }
  }
  static Networkmessage() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LoginPacket : pb::GeneratedMessage<LoginPacket, LoginPacket.Builder> {
  private LoginPacket() { }
  private static readonly LoginPacket defaultInstance = new LoginPacket().MakeReadOnly();
  private static readonly string[] _loginPacketFieldNames = new string[] { "login", "password" };
  private static readonly uint[] _loginPacketFieldTags = new uint[] { 10, 18 };
  public static LoginPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LoginPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LoginPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_LoginPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LoginPacket, LoginPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_LoginPacket__FieldAccessorTable; }
  }
  
  public const int LoginFieldNumber = 1;
  private bool hasLogin;
  private string login_ = "";
  public bool HasLogin {
    get { return hasLogin; }
  }
  public string Login {
    get { return login_; }
  }
  
  public const int PasswordFieldNumber = 2;
  private bool hasPassword;
  private string password_ = "";
  public bool HasPassword {
    get { return hasPassword; }
  }
  public string Password {
    get { return password_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasLogin) return false;
      if (!hasPassword) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _loginPacketFieldNames;
    if (hasLogin) {
      output.WriteString(1, field_names[0], Login);
    }
    if (hasPassword) {
      output.WriteString(2, field_names[1], Password);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLogin) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Login);
      }
      if (hasPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Password);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static LoginPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LoginPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LoginPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LoginPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LoginPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LoginPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LoginPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LoginPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LoginPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LoginPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LoginPacket result;
    
    private LoginPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        LoginPacket original = result;
        result = new LoginPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LoginPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LoginPacket.Descriptor; }
    }
    
    public override LoginPacket DefaultInstanceForType {
      get { return global::LoginPacket.DefaultInstance; }
    }
    
    public override LoginPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LoginPacket) {
        return MergeFrom((LoginPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LoginPacket other) {
      if (other == global::LoginPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasLogin) {
        Login = other.Login;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_loginPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _loginPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasLogin = input.ReadString(ref result.login_);
            break;
          }
          case 18: {
            result.hasPassword = input.ReadString(ref result.password_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasLogin {
      get { return result.hasLogin; }
    }
    public string Login {
      get { return result.Login; }
      set { SetLogin(value); }
    }
    public Builder SetLogin(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLogin = true;
      result.login_ = value;
      return this;
    }
    public Builder ClearLogin() {
      PrepareBuilder();
      result.hasLogin = false;
      result.login_ = "";
      return this;
    }
    
    public bool HasPassword {
      get { return result.hasPassword; }
    }
    public string Password {
      get { return result.Password; }
      set { SetPassword(value); }
    }
    public Builder SetPassword(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPassword = true;
      result.password_ = value;
      return this;
    }
    public Builder ClearPassword() {
      PrepareBuilder();
      result.hasPassword = false;
      result.password_ = "";
      return this;
    }
  }
  static LoginPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Character : pb::GeneratedMessage<Character, Character.Builder> {
  private Character() { }
  private static readonly Character defaultInstance = new Character().MakeReadOnly();
  private static readonly string[] _characterFieldNames = new string[] { "id", "info", "name" };
  private static readonly uint[] _characterFieldTags = new uint[] { 8, 26, 18 };
  public static Character DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Character DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Character ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_Character__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Character, Character.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_Character__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int InfoFieldNumber = 3;
  private bool hasInfo;
  private string info_ = "";
  public bool HasInfo {
    get { return hasInfo; }
  }
  public string Info {
    get { return info_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasName) return false;
      if (!hasInfo) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _characterFieldNames;
    if (hasId) {
      output.WriteInt32(1, field_names[0], Id);
    }
    if (hasName) {
      output.WriteString(2, field_names[2], Name);
    }
    if (hasInfo) {
      output.WriteString(3, field_names[1], Info);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasInfo) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Info);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Character ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Character MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Character prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Character, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Character cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Character result;
    
    private Character PrepareBuilder() {
      if (resultIsReadOnly) {
        Character original = result;
        result = new Character();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Character MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Character.Descriptor; }
    }
    
    public override Character DefaultInstanceForType {
      get { return global::Character.DefaultInstance; }
    }
    
    public override Character BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Character) {
        return MergeFrom((Character) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Character other) {
      if (other == global::Character.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasInfo) {
        Info = other.Info;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt32(ref result.id_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasInfo = input.ReadString(ref result.info_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasInfo {
      get { return result.hasInfo; }
    }
    public string Info {
      get { return result.Info; }
      set { SetInfo(value); }
    }
    public Builder SetInfo(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasInfo = true;
      result.info_ = value;
      return this;
    }
    public Builder ClearInfo() {
      PrepareBuilder();
      result.hasInfo = false;
      result.info_ = "";
      return this;
    }
  }
  static Character() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharactersPacket : pb::GeneratedMessage<CharactersPacket, CharactersPacket.Builder> {
  private CharactersPacket() { }
  private static readonly CharactersPacket defaultInstance = new CharactersPacket().MakeReadOnly();
  private static readonly string[] _charactersPacketFieldNames = new string[] { "CharacterList" };
  private static readonly uint[] _charactersPacketFieldTags = new uint[] { 10 };
  public static CharactersPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharactersPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharactersPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_CharactersPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharactersPacket, CharactersPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_CharactersPacket__FieldAccessorTable; }
  }
  
  public const int CharacterListFieldNumber = 1;
  private pbc::PopsicleList<global::Character> characterList_ = new pbc::PopsicleList<global::Character>();
  public scg::IList<global::Character> CharacterListList {
    get { return characterList_; }
  }
  public int CharacterListCount {
    get { return characterList_.Count; }
  }
  public global::Character GetCharacterList(int index) {
    return characterList_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Character element in CharacterListList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _charactersPacketFieldNames;
    if (characterList_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], characterList_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Character element in CharacterListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CharactersPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharactersPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharactersPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharactersPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharactersPacket MakeReadOnly() {
    characterList_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharactersPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharactersPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharactersPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharactersPacket result;
    
    private CharactersPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        CharactersPacket original = result;
        result = new CharactersPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharactersPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharactersPacket.Descriptor; }
    }
    
    public override CharactersPacket DefaultInstanceForType {
      get { return global::CharactersPacket.DefaultInstance; }
    }
    
    public override CharactersPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharactersPacket) {
        return MergeFrom((CharactersPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharactersPacket other) {
      if (other == global::CharactersPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.characterList_.Count != 0) {
        result.characterList_.Add(other.characterList_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_charactersPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _charactersPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.characterList_, global::Character.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Character> CharacterListList {
      get { return PrepareBuilder().characterList_; }
    }
    public int CharacterListCount {
      get { return result.CharacterListCount; }
    }
    public global::Character GetCharacterList(int index) {
      return result.GetCharacterList(index);
    }
    public Builder SetCharacterList(int index, global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.characterList_[index] = value;
      return this;
    }
    public Builder SetCharacterList(int index, global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.characterList_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCharacterList(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.characterList_.Add(value);
      return this;
    }
    public Builder AddCharacterList(global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.characterList_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCharacterList(scg::IEnumerable<global::Character> values) {
      PrepareBuilder();
      result.characterList_.Add(values);
      return this;
    }
    public Builder ClearCharacterList() {
      PrepareBuilder();
      result.characterList_.Clear();
      return this;
    }
  }
  static CharactersPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SelectCharacterPacket : pb::GeneratedMessage<SelectCharacterPacket, SelectCharacterPacket.Builder> {
  private SelectCharacterPacket() { }
  private static readonly SelectCharacterPacket defaultInstance = new SelectCharacterPacket().MakeReadOnly();
  private static readonly string[] _selectCharacterPacketFieldNames = new string[] { "id" };
  private static readonly uint[] _selectCharacterPacketFieldTags = new uint[] { 8 };
  public static SelectCharacterPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SelectCharacterPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SelectCharacterPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_SelectCharacterPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SelectCharacterPacket, SelectCharacterPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_SelectCharacterPacket__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _selectCharacterPacketFieldNames;
    if (hasId) {
      output.WriteInt32(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static SelectCharacterPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SelectCharacterPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SelectCharacterPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SelectCharacterPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SelectCharacterPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SelectCharacterPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SelectCharacterPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SelectCharacterPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SelectCharacterPacket result;
    
    private SelectCharacterPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        SelectCharacterPacket original = result;
        result = new SelectCharacterPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SelectCharacterPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SelectCharacterPacket.Descriptor; }
    }
    
    public override SelectCharacterPacket DefaultInstanceForType {
      get { return global::SelectCharacterPacket.DefaultInstance; }
    }
    
    public override SelectCharacterPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SelectCharacterPacket) {
        return MergeFrom((SelectCharacterPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SelectCharacterPacket other) {
      if (other == global::SelectCharacterPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_selectCharacterPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _selectCharacterPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt32(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
  }
  static SelectCharacterPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
  private Position() { }
  private static readonly Position defaultInstance = new Position().MakeReadOnly();
  private static readonly string[] _positionFieldNames = new string[] { "x", "y", "z" };
  private static readonly uint[] _positionFieldTags = new uint[] { 8, 16, 24 };
  public static Position DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Position DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Position ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_Position__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_Position__FieldAccessorTable; }
  }
  
  public const int XFieldNumber = 1;
  private bool hasX;
  private int x_;
  public bool HasX {
    get { return hasX; }
  }
  public int X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 2;
  private bool hasY;
  private int y_;
  public bool HasY {
    get { return hasY; }
  }
  public int Y {
    get { return y_; }
  }
  
  public const int ZFieldNumber = 3;
  private bool hasZ;
  private int z_;
  public bool HasZ {
    get { return hasZ; }
  }
  public int Z {
    get { return z_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasX) return false;
      if (!hasY) return false;
      if (!hasZ) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _positionFieldNames;
    if (hasX) {
      output.WriteInt32(1, field_names[0], X);
    }
    if (hasY) {
      output.WriteInt32(2, field_names[1], Y);
    }
    if (hasZ) {
      output.WriteInt32(3, field_names[2], Z);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Z);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Position ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Position MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Position prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Position cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Position result;
    
    private Position PrepareBuilder() {
      if (resultIsReadOnly) {
        Position original = result;
        result = new Position();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Position MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Position.Descriptor; }
    }
    
    public override Position DefaultInstanceForType {
      get { return global::Position.DefaultInstance; }
    }
    
    public override Position BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Position) {
        return MergeFrom((Position) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Position other) {
      if (other == global::Position.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasZ) {
        Z = other.Z;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _positionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasX = input.ReadInt32(ref result.x_);
            break;
          }
          case 16: {
            result.hasY = input.ReadInt32(ref result.y_);
            break;
          }
          case 24: {
            result.hasZ = input.ReadInt32(ref result.z_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasX {
      get { return result.hasX; }
    }
    public int X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(int value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public int Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(int value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasZ {
      get { return result.hasZ; }
    }
    public int Z {
      get { return result.Z; }
      set { SetZ(value); }
    }
    public Builder SetZ(int value) {
      PrepareBuilder();
      result.hasZ = true;
      result.z_ = value;
      return this;
    }
    public Builder ClearZ() {
      PrepareBuilder();
      result.hasZ = false;
      result.z_ = 0;
      return this;
    }
  }
  static Position() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequestMovementPacket : pb::GeneratedMessage<RequestMovementPacket, RequestMovementPacket.Builder> {
  private RequestMovementPacket() { }
  private static readonly RequestMovementPacket defaultInstance = new RequestMovementPacket().MakeReadOnly();
  private static readonly string[] _requestMovementPacketFieldNames = new string[] { "movementType" };
  private static readonly uint[] _requestMovementPacketFieldTags = new uint[] { 8 };
  public static RequestMovementPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RequestMovementPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RequestMovementPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_RequestMovementPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RequestMovementPacket, RequestMovementPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_RequestMovementPacket__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum MovementType {
      UP = 1,
      DOWN = 2,
      LEFT = 3,
      RIGHT = 4,
    }
    
  }
  #endregion
  
  public const int MovementTypeFieldNumber = 1;
  private bool hasMovementType;
  private global::RequestMovementPacket.Types.MovementType movementType_ = global::RequestMovementPacket.Types.MovementType.UP;
  public bool HasMovementType {
    get { return hasMovementType; }
  }
  public global::RequestMovementPacket.Types.MovementType MovementType {
    get { return movementType_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasMovementType) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _requestMovementPacketFieldNames;
    if (hasMovementType) {
      output.WriteEnum(1, field_names[0], (int) MovementType, MovementType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMovementType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MovementType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static RequestMovementPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RequestMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RequestMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequestMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RequestMovementPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RequestMovementPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RequestMovementPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RequestMovementPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RequestMovementPacket result;
    
    private RequestMovementPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        RequestMovementPacket original = result;
        result = new RequestMovementPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RequestMovementPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RequestMovementPacket.Descriptor; }
    }
    
    public override RequestMovementPacket DefaultInstanceForType {
      get { return global::RequestMovementPacket.DefaultInstance; }
    }
    
    public override RequestMovementPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RequestMovementPacket) {
        return MergeFrom((RequestMovementPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RequestMovementPacket other) {
      if (other == global::RequestMovementPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMovementType) {
        MovementType = other.MovementType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_requestMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _requestMovementPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.movementType_, out unknown)) {
              result.hasMovementType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMovementType {
     get { return result.hasMovementType; }
    }
    public global::RequestMovementPacket.Types.MovementType MovementType {
      get { return result.MovementType; }
      set { SetMovementType(value); }
    }
    public Builder SetMovementType(global::RequestMovementPacket.Types.MovementType value) {
      PrepareBuilder();
      result.hasMovementType = true;
      result.movementType_ = value;
      return this;
    }
    public Builder ClearMovementType() {
      PrepareBuilder();
      result.hasMovementType = false;
      result.movementType_ = global::RequestMovementPacket.Types.MovementType.UP;
      return this;
    }
  }
  static RequestMovementPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AreaDescriptionPacket : pb::GeneratedMessage<AreaDescriptionPacket, AreaDescriptionPacket.Builder> {
  private AreaDescriptionPacket() { }
  private static readonly AreaDescriptionPacket defaultInstance = new AreaDescriptionPacket().MakeReadOnly();
  private static readonly string[] _areaDescriptionPacketFieldNames = new string[] { "areaId", "creatures", "height", "player", "players", "startX", "startY", "tiles", "width" };
  private static readonly uint[] _areaDescriptionPacketFieldTags = new uint[] { 8, 74, 24, 58, 66, 32, 40, 50, 16 };
  public static AreaDescriptionPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AreaDescriptionPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AreaDescriptionPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_AreaDescriptionPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AreaDescriptionPacket, AreaDescriptionPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_AreaDescriptionPacket__FieldAccessorTable; }
  }
  
  public const int AreaIdFieldNumber = 1;
  private bool hasAreaId;
  private int areaId_;
  public bool HasAreaId {
    get { return hasAreaId; }
  }
  public int AreaId {
    get { return areaId_; }
  }
  
  public const int WidthFieldNumber = 2;
  private bool hasWidth;
  private int width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  public int Width {
    get { return width_; }
  }
  
  public const int HeightFieldNumber = 3;
  private bool hasHeight;
  private int height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  public int Height {
    get { return height_; }
  }
  
  public const int StartXFieldNumber = 4;
  private bool hasStartX;
  private int startX_;
  public bool HasStartX {
    get { return hasStartX; }
  }
  public int StartX {
    get { return startX_; }
  }
  
  public const int StartYFieldNumber = 5;
  private bool hasStartY;
  private int startY_;
  public bool HasStartY {
    get { return hasStartY; }
  }
  public int StartY {
    get { return startY_; }
  }
  
  public const int TilesFieldNumber = 6;
  private pbc::PopsicleList<global::TileDescription> tiles_ = new pbc::PopsicleList<global::TileDescription>();
  public scg::IList<global::TileDescription> TilesList {
    get { return tiles_; }
  }
  public int TilesCount {
    get { return tiles_.Count; }
  }
  public global::TileDescription GetTiles(int index) {
    return tiles_[index];
  }
  
  public const int PlayerFieldNumber = 7;
  private bool hasPlayer;
  private global::PlayerDescription player_;
  public bool HasPlayer {
    get { return hasPlayer; }
  }
  public global::PlayerDescription Player {
    get { return player_ ?? global::PlayerDescription.DefaultInstance; }
  }
  
  public const int PlayersFieldNumber = 8;
  private pbc::PopsicleList<global::PlayerDescription> players_ = new pbc::PopsicleList<global::PlayerDescription>();
  public scg::IList<global::PlayerDescription> PlayersList {
    get { return players_; }
  }
  public int PlayersCount {
    get { return players_.Count; }
  }
  public global::PlayerDescription GetPlayers(int index) {
    return players_[index];
  }
  
  public const int CreaturesFieldNumber = 9;
  private pbc::PopsicleList<global::CreatureDescription> creatures_ = new pbc::PopsicleList<global::CreatureDescription>();
  public scg::IList<global::CreatureDescription> CreaturesList {
    get { return creatures_; }
  }
  public int CreaturesCount {
    get { return creatures_.Count; }
  }
  public global::CreatureDescription GetCreatures(int index) {
    return creatures_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasAreaId) return false;
      if (!hasWidth) return false;
      if (!hasHeight) return false;
      if (!hasStartX) return false;
      if (!hasStartY) return false;
      if (!hasPlayer) return false;
      foreach (global::TileDescription element in TilesList) {
        if (!element.IsInitialized) return false;
      }
      if (!Player.IsInitialized) return false;
      foreach (global::PlayerDescription element in PlayersList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::CreatureDescription element in CreaturesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _areaDescriptionPacketFieldNames;
    if (hasAreaId) {
      output.WriteInt32(1, field_names[0], AreaId);
    }
    if (hasWidth) {
      output.WriteInt32(2, field_names[8], Width);
    }
    if (hasHeight) {
      output.WriteInt32(3, field_names[2], Height);
    }
    if (hasStartX) {
      output.WriteInt32(4, field_names[5], StartX);
    }
    if (hasStartY) {
      output.WriteInt32(5, field_names[6], StartY);
    }
    if (tiles_.Count > 0) {
      output.WriteMessageArray(6, field_names[7], tiles_);
    }
    if (hasPlayer) {
      output.WriteMessage(7, field_names[3], Player);
    }
    if (players_.Count > 0) {
      output.WriteMessageArray(8, field_names[4], players_);
    }
    if (creatures_.Count > 0) {
      output.WriteMessageArray(9, field_names[1], creatures_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAreaId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, AreaId);
      }
      if (hasWidth) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Width);
      }
      if (hasHeight) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Height);
      }
      if (hasStartX) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, StartX);
      }
      if (hasStartY) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, StartY);
      }
      foreach (global::TileDescription element in TilesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      if (hasPlayer) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Player);
      }
      foreach (global::PlayerDescription element in PlayersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      foreach (global::CreatureDescription element in CreaturesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static AreaDescriptionPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AreaDescriptionPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AreaDescriptionPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AreaDescriptionPacket MakeReadOnly() {
    tiles_.MakeReadOnly();
    players_.MakeReadOnly();
    creatures_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AreaDescriptionPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AreaDescriptionPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AreaDescriptionPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AreaDescriptionPacket result;
    
    private AreaDescriptionPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        AreaDescriptionPacket original = result;
        result = new AreaDescriptionPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AreaDescriptionPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AreaDescriptionPacket.Descriptor; }
    }
    
    public override AreaDescriptionPacket DefaultInstanceForType {
      get { return global::AreaDescriptionPacket.DefaultInstance; }
    }
    
    public override AreaDescriptionPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AreaDescriptionPacket) {
        return MergeFrom((AreaDescriptionPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AreaDescriptionPacket other) {
      if (other == global::AreaDescriptionPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAreaId) {
        AreaId = other.AreaId;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasStartX) {
        StartX = other.StartX;
      }
      if (other.HasStartY) {
        StartY = other.StartY;
      }
      if (other.tiles_.Count != 0) {
        result.tiles_.Add(other.tiles_);
      }
      if (other.HasPlayer) {
        MergePlayer(other.Player);
      }
      if (other.players_.Count != 0) {
        result.players_.Add(other.players_);
      }
      if (other.creatures_.Count != 0) {
        result.creatures_.Add(other.creatures_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_areaDescriptionPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _areaDescriptionPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAreaId = input.ReadInt32(ref result.areaId_);
            break;
          }
          case 16: {
            result.hasWidth = input.ReadInt32(ref result.width_);
            break;
          }
          case 24: {
            result.hasHeight = input.ReadInt32(ref result.height_);
            break;
          }
          case 32: {
            result.hasStartX = input.ReadInt32(ref result.startX_);
            break;
          }
          case 40: {
            result.hasStartY = input.ReadInt32(ref result.startY_);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.tiles_, global::TileDescription.DefaultInstance, extensionRegistry);
            break;
          }
          case 58: {
            global::PlayerDescription.Builder subBuilder = global::PlayerDescription.CreateBuilder();
            if (result.hasPlayer) {
              subBuilder.MergeFrom(Player);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Player = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.players_, global::PlayerDescription.DefaultInstance, extensionRegistry);
            break;
          }
          case 74: {
            input.ReadMessageArray(tag, field_name, result.creatures_, global::CreatureDescription.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAreaId {
      get { return result.hasAreaId; }
    }
    public int AreaId {
      get { return result.AreaId; }
      set { SetAreaId(value); }
    }
    public Builder SetAreaId(int value) {
      PrepareBuilder();
      result.hasAreaId = true;
      result.areaId_ = value;
      return this;
    }
    public Builder ClearAreaId() {
      PrepareBuilder();
      result.hasAreaId = false;
      result.areaId_ = 0;
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    public int Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    public Builder SetWidth(int value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    public int Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    public Builder SetHeight(int value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0;
      return this;
    }
    
    public bool HasStartX {
      get { return result.hasStartX; }
    }
    public int StartX {
      get { return result.StartX; }
      set { SetStartX(value); }
    }
    public Builder SetStartX(int value) {
      PrepareBuilder();
      result.hasStartX = true;
      result.startX_ = value;
      return this;
    }
    public Builder ClearStartX() {
      PrepareBuilder();
      result.hasStartX = false;
      result.startX_ = 0;
      return this;
    }
    
    public bool HasStartY {
      get { return result.hasStartY; }
    }
    public int StartY {
      get { return result.StartY; }
      set { SetStartY(value); }
    }
    public Builder SetStartY(int value) {
      PrepareBuilder();
      result.hasStartY = true;
      result.startY_ = value;
      return this;
    }
    public Builder ClearStartY() {
      PrepareBuilder();
      result.hasStartY = false;
      result.startY_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::TileDescription> TilesList {
      get { return PrepareBuilder().tiles_; }
    }
    public int TilesCount {
      get { return result.TilesCount; }
    }
    public global::TileDescription GetTiles(int index) {
      return result.GetTiles(index);
    }
    public Builder SetTiles(int index, global::TileDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tiles_[index] = value;
      return this;
    }
    public Builder SetTiles(int index, global::TileDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tiles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTiles(global::TileDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tiles_.Add(value);
      return this;
    }
    public Builder AddTiles(global::TileDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tiles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTiles(scg::IEnumerable<global::TileDescription> values) {
      PrepareBuilder();
      result.tiles_.Add(values);
      return this;
    }
    public Builder ClearTiles() {
      PrepareBuilder();
      result.tiles_.Clear();
      return this;
    }
    
    public bool HasPlayer {
     get { return result.hasPlayer; }
    }
    public global::PlayerDescription Player {
      get { return result.Player; }
      set { SetPlayer(value); }
    }
    public Builder SetPlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = value;
      return this;
    }
    public Builder SetPlayer(global::PlayerDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayer &&
          result.player_ != global::PlayerDescription.DefaultInstance) {
          result.player_ = global::PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
      } else {
        result.player_ = value;
      }
      result.hasPlayer = true;
      return this;
    }
    public Builder ClearPlayer() {
      PrepareBuilder();
      result.hasPlayer = false;
      result.player_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerDescription> PlayersList {
      get { return PrepareBuilder().players_; }
    }
    public int PlayersCount {
      get { return result.PlayersCount; }
    }
    public global::PlayerDescription GetPlayers(int index) {
      return result.GetPlayers(index);
    }
    public Builder SetPlayers(int index, global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.players_[index] = value;
      return this;
    }
    public Builder SetPlayers(int index, global::PlayerDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.players_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayers(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.players_.Add(value);
      return this;
    }
    public Builder AddPlayers(global::PlayerDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.players_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayers(scg::IEnumerable<global::PlayerDescription> values) {
      PrepareBuilder();
      result.players_.Add(values);
      return this;
    }
    public Builder ClearPlayers() {
      PrepareBuilder();
      result.players_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::CreatureDescription> CreaturesList {
      get { return PrepareBuilder().creatures_; }
    }
    public int CreaturesCount {
      get { return result.CreaturesCount; }
    }
    public global::CreatureDescription GetCreatures(int index) {
      return result.GetCreatures(index);
    }
    public Builder SetCreatures(int index, global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.creatures_[index] = value;
      return this;
    }
    public Builder SetCreatures(int index, global::CreatureDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.creatures_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCreatures(global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.creatures_.Add(value);
      return this;
    }
    public Builder AddCreatures(global::CreatureDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.creatures_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCreatures(scg::IEnumerable<global::CreatureDescription> values) {
      PrepareBuilder();
      result.creatures_.Add(values);
      return this;
    }
    public Builder ClearCreatures() {
      PrepareBuilder();
      result.creatures_.Clear();
      return this;
    }
  }
  static AreaDescriptionPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TileDescription : pb::GeneratedMessage<TileDescription, TileDescription.Builder> {
  private TileDescription() { }
  private static readonly TileDescription defaultInstance = new TileDescription().MakeReadOnly();
  private static readonly string[] _tileDescriptionFieldNames = new string[] { "groundId", "items" };
  private static readonly uint[] _tileDescriptionFieldTags = new uint[] { 8, 16 };
  public static TileDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TileDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TileDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_TileDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TileDescription, TileDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_TileDescription__FieldAccessorTable; }
  }
  
  public const int GroundIdFieldNumber = 1;
  private bool hasGroundId;
  private int groundId_;
  public bool HasGroundId {
    get { return hasGroundId; }
  }
  public int GroundId {
    get { return groundId_; }
  }
  
  public const int ItemsFieldNumber = 2;
  private pbc::PopsicleList<int> items_ = new pbc::PopsicleList<int>();
  public scg::IList<int> ItemsList {
    get { return pbc::Lists.AsReadOnly(items_); }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public int GetItems(int index) {
    return items_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGroundId) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tileDescriptionFieldNames;
    if (hasGroundId) {
      output.WriteInt32(1, field_names[0], GroundId);
    }
    if (items_.Count > 0) {
      output.WriteInt32Array(2, field_names[1], items_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGroundId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, GroundId);
      }
      {
        int dataSize = 0;
        foreach (int element in ItemsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * items_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TileDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TileDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TileDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TileDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TileDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TileDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TileDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TileDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TileDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TileDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TileDescription MakeReadOnly() {
    items_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TileDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TileDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TileDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TileDescription result;
    
    private TileDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        TileDescription original = result;
        result = new TileDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TileDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TileDescription.Descriptor; }
    }
    
    public override TileDescription DefaultInstanceForType {
      get { return global::TileDescription.DefaultInstance; }
    }
    
    public override TileDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TileDescription) {
        return MergeFrom((TileDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TileDescription other) {
      if (other == global::TileDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGroundId) {
        GroundId = other.GroundId;
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tileDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tileDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGroundId = input.ReadInt32(ref result.groundId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt32Array(tag, field_name, result.items_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGroundId {
      get { return result.hasGroundId; }
    }
    public int GroundId {
      get { return result.GroundId; }
      set { SetGroundId(value); }
    }
    public Builder SetGroundId(int value) {
      PrepareBuilder();
      result.hasGroundId = true;
      result.groundId_ = value;
      return this;
    }
    public Builder ClearGroundId() {
      PrepareBuilder();
      result.hasGroundId = false;
      result.groundId_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public int GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, int value) {
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder AddItems(int value) {
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
  }
  static TileDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CreatureRespawnPacket : pb::GeneratedMessage<CreatureRespawnPacket, CreatureRespawnPacket.Builder> {
  private CreatureRespawnPacket() { }
  private static readonly CreatureRespawnPacket defaultInstance = new CreatureRespawnPacket().MakeReadOnly();
  private static readonly string[] _creatureRespawnPacketFieldNames = new string[] { "creatureDescription" };
  private static readonly uint[] _creatureRespawnPacketFieldTags = new uint[] { 10 };
  public static CreatureRespawnPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CreatureRespawnPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CreatureRespawnPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_CreatureRespawnPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CreatureRespawnPacket, CreatureRespawnPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_CreatureRespawnPacket__FieldAccessorTable; }
  }
  
  public const int CreatureDescriptionFieldNumber = 1;
  private bool hasCreatureDescription;
  private global::CreatureDescription creatureDescription_;
  public bool HasCreatureDescription {
    get { return hasCreatureDescription; }
  }
  public global::CreatureDescription CreatureDescription {
    get { return creatureDescription_ ?? global::CreatureDescription.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCreatureDescription) return false;
      if (!CreatureDescription.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _creatureRespawnPacketFieldNames;
    if (hasCreatureDescription) {
      output.WriteMessage(1, field_names[0], CreatureDescription);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCreatureDescription) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, CreatureDescription);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CreatureRespawnPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CreatureRespawnPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureRespawnPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CreatureRespawnPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CreatureRespawnPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CreatureRespawnPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CreatureRespawnPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CreatureRespawnPacket result;
    
    private CreatureRespawnPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        CreatureRespawnPacket original = result;
        result = new CreatureRespawnPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CreatureRespawnPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CreatureRespawnPacket.Descriptor; }
    }
    
    public override CreatureRespawnPacket DefaultInstanceForType {
      get { return global::CreatureRespawnPacket.DefaultInstance; }
    }
    
    public override CreatureRespawnPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CreatureRespawnPacket) {
        return MergeFrom((CreatureRespawnPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CreatureRespawnPacket other) {
      if (other == global::CreatureRespawnPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCreatureDescription) {
        MergeCreatureDescription(other.CreatureDescription);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_creatureRespawnPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _creatureRespawnPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CreatureDescription.Builder subBuilder = global::CreatureDescription.CreateBuilder();
            if (result.hasCreatureDescription) {
              subBuilder.MergeFrom(CreatureDescription);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CreatureDescription = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCreatureDescription {
     get { return result.hasCreatureDescription; }
    }
    public global::CreatureDescription CreatureDescription {
      get { return result.CreatureDescription; }
      set { SetCreatureDescription(value); }
    }
    public Builder SetCreatureDescription(global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreatureDescription = true;
      result.creatureDescription_ = value;
      return this;
    }
    public Builder SetCreatureDescription(global::CreatureDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCreatureDescription = true;
      result.creatureDescription_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCreatureDescription(global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCreatureDescription &&
          result.creatureDescription_ != global::CreatureDescription.DefaultInstance) {
          result.creatureDescription_ = global::CreatureDescription.CreateBuilder(result.creatureDescription_).MergeFrom(value).BuildPartial();
      } else {
        result.creatureDescription_ = value;
      }
      result.hasCreatureDescription = true;
      return this;
    }
    public Builder ClearCreatureDescription() {
      PrepareBuilder();
      result.hasCreatureDescription = false;
      result.creatureDescription_ = null;
      return this;
    }
  }
  static CreatureRespawnPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CreatureDescription : pb::GeneratedMessage<CreatureDescription, CreatureDescription.Builder> {
  private CreatureDescription() { }
  private static readonly CreatureDescription defaultInstance = new CreatureDescription().MakeReadOnly();
  private static readonly string[] _creatureDescriptionFieldNames = new string[] { "creatureGuid", "creaturePosition", "name", "textId" };
  private static readonly uint[] _creatureDescriptionFieldTags = new uint[] { 10, 26, 34, 16 };
  public static CreatureDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CreatureDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CreatureDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_CreatureDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CreatureDescription, CreatureDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_CreatureDescription__FieldAccessorTable; }
  }
  
  public const int CreatureGuidFieldNumber = 1;
  private bool hasCreatureGuid;
  private string creatureGuid_ = "";
  public bool HasCreatureGuid {
    get { return hasCreatureGuid; }
  }
  public string CreatureGuid {
    get { return creatureGuid_; }
  }
  
  public const int TextIdFieldNumber = 2;
  private bool hasTextId;
  private int textId_;
  public bool HasTextId {
    get { return hasTextId; }
  }
  public int TextId {
    get { return textId_; }
  }
  
  public const int CreaturePositionFieldNumber = 3;
  private bool hasCreaturePosition;
  private global::Position creaturePosition_;
  public bool HasCreaturePosition {
    get { return hasCreaturePosition; }
  }
  public global::Position CreaturePosition {
    get { return creaturePosition_ ?? global::Position.DefaultInstance; }
  }
  
  public const int NameFieldNumber = 4;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCreatureGuid) return false;
      if (!hasTextId) return false;
      if (!hasCreaturePosition) return false;
      if (!hasName) return false;
      if (!CreaturePosition.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _creatureDescriptionFieldNames;
    if (hasCreatureGuid) {
      output.WriteString(1, field_names[0], CreatureGuid);
    }
    if (hasTextId) {
      output.WriteInt32(2, field_names[3], TextId);
    }
    if (hasCreaturePosition) {
      output.WriteMessage(3, field_names[1], CreaturePosition);
    }
    if (hasName) {
      output.WriteString(4, field_names[2], Name);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCreatureGuid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, CreatureGuid);
      }
      if (hasTextId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, TextId);
      }
      if (hasCreaturePosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, CreaturePosition);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Name);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CreatureDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CreatureDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CreatureDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CreatureDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CreatureDescription MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CreatureDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CreatureDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CreatureDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CreatureDescription result;
    
    private CreatureDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        CreatureDescription original = result;
        result = new CreatureDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CreatureDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CreatureDescription.Descriptor; }
    }
    
    public override CreatureDescription DefaultInstanceForType {
      get { return global::CreatureDescription.DefaultInstance; }
    }
    
    public override CreatureDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CreatureDescription) {
        return MergeFrom((CreatureDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CreatureDescription other) {
      if (other == global::CreatureDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCreatureGuid) {
        CreatureGuid = other.CreatureGuid;
      }
      if (other.HasTextId) {
        TextId = other.TextId;
      }
      if (other.HasCreaturePosition) {
        MergeCreaturePosition(other.CreaturePosition);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_creatureDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _creatureDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasCreatureGuid = input.ReadString(ref result.creatureGuid_);
            break;
          }
          case 16: {
            result.hasTextId = input.ReadInt32(ref result.textId_);
            break;
          }
          case 26: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasCreaturePosition) {
              subBuilder.MergeFrom(CreaturePosition);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            CreaturePosition = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCreatureGuid {
      get { return result.hasCreatureGuid; }
    }
    public string CreatureGuid {
      get { return result.CreatureGuid; }
      set { SetCreatureGuid(value); }
    }
    public Builder SetCreatureGuid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreatureGuid = true;
      result.creatureGuid_ = value;
      return this;
    }
    public Builder ClearCreatureGuid() {
      PrepareBuilder();
      result.hasCreatureGuid = false;
      result.creatureGuid_ = "";
      return this;
    }
    
    public bool HasTextId {
      get { return result.hasTextId; }
    }
    public int TextId {
      get { return result.TextId; }
      set { SetTextId(value); }
    }
    public Builder SetTextId(int value) {
      PrepareBuilder();
      result.hasTextId = true;
      result.textId_ = value;
      return this;
    }
    public Builder ClearTextId() {
      PrepareBuilder();
      result.hasTextId = false;
      result.textId_ = 0;
      return this;
    }
    
    public bool HasCreaturePosition {
     get { return result.hasCreaturePosition; }
    }
    public global::Position CreaturePosition {
      get { return result.CreaturePosition; }
      set { SetCreaturePosition(value); }
    }
    public Builder SetCreaturePosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreaturePosition = true;
      result.creaturePosition_ = value;
      return this;
    }
    public Builder SetCreaturePosition(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCreaturePosition = true;
      result.creaturePosition_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCreaturePosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCreaturePosition &&
          result.creaturePosition_ != global::Position.DefaultInstance) {
          result.creaturePosition_ = global::Position.CreateBuilder(result.creaturePosition_).MergeFrom(value).BuildPartial();
      } else {
        result.creaturePosition_ = value;
      }
      result.hasCreaturePosition = true;
      return this;
    }
    public Builder ClearCreaturePosition() {
      PrepareBuilder();
      result.hasCreaturePosition = false;
      result.creaturePosition_ = null;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
  }
  static CreatureDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerDescription : pb::GeneratedMessage<PlayerDescription, PlayerDescription.Builder> {
  private PlayerDescription() { }
  private static readonly PlayerDescription defaultInstance = new PlayerDescription().MakeReadOnly();
  private static readonly string[] _playerDescriptionFieldNames = new string[] { "name", "playerGuid", "playerPosition", "speed" };
  private static readonly uint[] _playerDescriptionFieldTags = new uint[] { 18, 10, 26, 32 };
  public static PlayerDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_PlayerDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerDescription, PlayerDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_PlayerDescription__FieldAccessorTable; }
  }
  
  public const int PlayerGuidFieldNumber = 1;
  private bool hasPlayerGuid;
  private string playerGuid_ = "";
  public bool HasPlayerGuid {
    get { return hasPlayerGuid; }
  }
  public string PlayerGuid {
    get { return playerGuid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int PlayerPositionFieldNumber = 3;
  private bool hasPlayerPosition;
  private global::Position playerPosition_;
  public bool HasPlayerPosition {
    get { return hasPlayerPosition; }
  }
  public global::Position PlayerPosition {
    get { return playerPosition_ ?? global::Position.DefaultInstance; }
  }
  
  public const int SpeedFieldNumber = 4;
  private bool hasSpeed;
  private int speed_;
  public bool HasSpeed {
    get { return hasSpeed; }
  }
  public int Speed {
    get { return speed_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPlayerGuid) return false;
      if (!hasName) return false;
      if (!hasPlayerPosition) return false;
      if (!hasSpeed) return false;
      if (!PlayerPosition.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerDescriptionFieldNames;
    if (hasPlayerGuid) {
      output.WriteString(1, field_names[1], PlayerGuid);
    }
    if (hasName) {
      output.WriteString(2, field_names[0], Name);
    }
    if (hasPlayerPosition) {
      output.WriteMessage(3, field_names[2], PlayerPosition);
    }
    if (hasSpeed) {
      output.WriteInt32(4, field_names[3], Speed);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerGuid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasPlayerPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, PlayerPosition);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Speed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerDescription MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerDescription result;
    
    private PlayerDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerDescription original = result;
        result = new PlayerDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerDescription.Descriptor; }
    }
    
    public override PlayerDescription DefaultInstanceForType {
      get { return global::PlayerDescription.DefaultInstance; }
    }
    
    public override PlayerDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerDescription) {
        return MergeFrom((PlayerDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerDescription other) {
      if (other == global::PlayerDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerGuid) {
        PlayerGuid = other.PlayerGuid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasPlayerPosition) {
        MergePlayerPosition(other.PlayerPosition);
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPlayerGuid = input.ReadString(ref result.playerGuid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasPlayerPosition) {
              subBuilder.MergeFrom(PlayerPosition);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerPosition = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            result.hasSpeed = input.ReadInt32(ref result.speed_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerGuid {
      get { return result.hasPlayerGuid; }
    }
    public string PlayerGuid {
      get { return result.PlayerGuid; }
      set { SetPlayerGuid(value); }
    }
    public Builder SetPlayerGuid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerGuid = true;
      result.playerGuid_ = value;
      return this;
    }
    public Builder ClearPlayerGuid() {
      PrepareBuilder();
      result.hasPlayerGuid = false;
      result.playerGuid_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasPlayerPosition {
     get { return result.hasPlayerPosition; }
    }
    public global::Position PlayerPosition {
      get { return result.PlayerPosition; }
      set { SetPlayerPosition(value); }
    }
    public Builder SetPlayerPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerPosition = true;
      result.playerPosition_ = value;
      return this;
    }
    public Builder SetPlayerPosition(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerPosition = true;
      result.playerPosition_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerPosition &&
          result.playerPosition_ != global::Position.DefaultInstance) {
          result.playerPosition_ = global::Position.CreateBuilder(result.playerPosition_).MergeFrom(value).BuildPartial();
      } else {
        result.playerPosition_ = value;
      }
      result.hasPlayerPosition = true;
      return this;
    }
    public Builder ClearPlayerPosition() {
      PrepareBuilder();
      result.hasPlayerPosition = false;
      result.playerPosition_ = null;
      return this;
    }
    
    public bool HasSpeed {
      get { return result.hasSpeed; }
    }
    public int Speed {
      get { return result.Speed; }
      set { SetSpeed(value); }
    }
    public Builder SetSpeed(int value) {
      PrepareBuilder();
      result.hasSpeed = true;
      result.speed_ = value;
      return this;
    }
    public Builder ClearSpeed() {
      PrepareBuilder();
      result.hasSpeed = false;
      result.speed_ = 0;
      return this;
    }
  }
  static PlayerDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StatsDescription : pb::GeneratedMessage<StatsDescription, StatsDescription.Builder> {
  private StatsDescription() { }
  private static readonly StatsDescription defaultInstance = new StatsDescription().MakeReadOnly();
  private static readonly string[] _statsDescriptionFieldNames = new string[] { "CONS", "DEX", "HP", "INT", "MP", "STR", "WIS" };
  private static readonly uint[] _statsDescriptionFieldTags = new uint[] { 8, 40, 48, 24, 56, 16, 32 };
  public static StatsDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StatsDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StatsDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_StatsDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StatsDescription, StatsDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_StatsDescription__FieldAccessorTable; }
  }
  
  public const int CONSFieldNumber = 1;
  private bool hasCONS;
  private int cONS_;
  public bool HasCONS {
    get { return hasCONS; }
  }
  public int CONS {
    get { return cONS_; }
  }
  
  public const int STRFieldNumber = 2;
  private bool hasSTR;
  private int sTR_;
  public bool HasSTR {
    get { return hasSTR; }
  }
  public int STR {
    get { return sTR_; }
  }
  
  public const int INTFieldNumber = 3;
  private bool hasINT;
  private int iNT_;
  public bool HasINT {
    get { return hasINT; }
  }
  public int INT {
    get { return iNT_; }
  }
  
  public const int WISFieldNumber = 4;
  private bool hasWIS;
  private int wIS_;
  public bool HasWIS {
    get { return hasWIS; }
  }
  public int WIS {
    get { return wIS_; }
  }
  
  public const int DEXFieldNumber = 5;
  private bool hasDEX;
  private int dEX_;
  public bool HasDEX {
    get { return hasDEX; }
  }
  public int DEX {
    get { return dEX_; }
  }
  
  public const int HPFieldNumber = 6;
  private bool hasHP;
  private int hP_;
  public bool HasHP {
    get { return hasHP; }
  }
  public int HP {
    get { return hP_; }
  }
  
  public const int MPFieldNumber = 7;
  private bool hasMP;
  private int mP_;
  public bool HasMP {
    get { return hasMP; }
  }
  public int MP {
    get { return mP_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCONS) return false;
      if (!hasSTR) return false;
      if (!hasINT) return false;
      if (!hasWIS) return false;
      if (!hasDEX) return false;
      if (!hasHP) return false;
      if (!hasMP) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _statsDescriptionFieldNames;
    if (hasCONS) {
      output.WriteInt32(1, field_names[0], CONS);
    }
    if (hasSTR) {
      output.WriteInt32(2, field_names[5], STR);
    }
    if (hasINT) {
      output.WriteInt32(3, field_names[3], INT);
    }
    if (hasWIS) {
      output.WriteInt32(4, field_names[6], WIS);
    }
    if (hasDEX) {
      output.WriteInt32(5, field_names[1], DEX);
    }
    if (hasHP) {
      output.WriteInt32(6, field_names[2], HP);
    }
    if (hasMP) {
      output.WriteInt32(7, field_names[4], MP);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCONS) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, CONS);
      }
      if (hasSTR) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, STR);
      }
      if (hasINT) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, INT);
      }
      if (hasWIS) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, WIS);
      }
      if (hasDEX) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, DEX);
      }
      if (hasHP) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, HP);
      }
      if (hasMP) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, MP);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static StatsDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatsDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatsDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatsDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatsDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatsDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StatsDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StatsDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StatsDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatsDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StatsDescription MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StatsDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StatsDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StatsDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StatsDescription result;
    
    private StatsDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        StatsDescription original = result;
        result = new StatsDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StatsDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StatsDescription.Descriptor; }
    }
    
    public override StatsDescription DefaultInstanceForType {
      get { return global::StatsDescription.DefaultInstance; }
    }
    
    public override StatsDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StatsDescription) {
        return MergeFrom((StatsDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StatsDescription other) {
      if (other == global::StatsDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCONS) {
        CONS = other.CONS;
      }
      if (other.HasSTR) {
        STR = other.STR;
      }
      if (other.HasINT) {
        INT = other.INT;
      }
      if (other.HasWIS) {
        WIS = other.WIS;
      }
      if (other.HasDEX) {
        DEX = other.DEX;
      }
      if (other.HasHP) {
        HP = other.HP;
      }
      if (other.HasMP) {
        MP = other.MP;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_statsDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _statsDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCONS = input.ReadInt32(ref result.cONS_);
            break;
          }
          case 16: {
            result.hasSTR = input.ReadInt32(ref result.sTR_);
            break;
          }
          case 24: {
            result.hasINT = input.ReadInt32(ref result.iNT_);
            break;
          }
          case 32: {
            result.hasWIS = input.ReadInt32(ref result.wIS_);
            break;
          }
          case 40: {
            result.hasDEX = input.ReadInt32(ref result.dEX_);
            break;
          }
          case 48: {
            result.hasHP = input.ReadInt32(ref result.hP_);
            break;
          }
          case 56: {
            result.hasMP = input.ReadInt32(ref result.mP_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCONS {
      get { return result.hasCONS; }
    }
    public int CONS {
      get { return result.CONS; }
      set { SetCONS(value); }
    }
    public Builder SetCONS(int value) {
      PrepareBuilder();
      result.hasCONS = true;
      result.cONS_ = value;
      return this;
    }
    public Builder ClearCONS() {
      PrepareBuilder();
      result.hasCONS = false;
      result.cONS_ = 0;
      return this;
    }
    
    public bool HasSTR {
      get { return result.hasSTR; }
    }
    public int STR {
      get { return result.STR; }
      set { SetSTR(value); }
    }
    public Builder SetSTR(int value) {
      PrepareBuilder();
      result.hasSTR = true;
      result.sTR_ = value;
      return this;
    }
    public Builder ClearSTR() {
      PrepareBuilder();
      result.hasSTR = false;
      result.sTR_ = 0;
      return this;
    }
    
    public bool HasINT {
      get { return result.hasINT; }
    }
    public int INT {
      get { return result.INT; }
      set { SetINT(value); }
    }
    public Builder SetINT(int value) {
      PrepareBuilder();
      result.hasINT = true;
      result.iNT_ = value;
      return this;
    }
    public Builder ClearINT() {
      PrepareBuilder();
      result.hasINT = false;
      result.iNT_ = 0;
      return this;
    }
    
    public bool HasWIS {
      get { return result.hasWIS; }
    }
    public int WIS {
      get { return result.WIS; }
      set { SetWIS(value); }
    }
    public Builder SetWIS(int value) {
      PrepareBuilder();
      result.hasWIS = true;
      result.wIS_ = value;
      return this;
    }
    public Builder ClearWIS() {
      PrepareBuilder();
      result.hasWIS = false;
      result.wIS_ = 0;
      return this;
    }
    
    public bool HasDEX {
      get { return result.hasDEX; }
    }
    public int DEX {
      get { return result.DEX; }
      set { SetDEX(value); }
    }
    public Builder SetDEX(int value) {
      PrepareBuilder();
      result.hasDEX = true;
      result.dEX_ = value;
      return this;
    }
    public Builder ClearDEX() {
      PrepareBuilder();
      result.hasDEX = false;
      result.dEX_ = 0;
      return this;
    }
    
    public bool HasHP {
      get { return result.hasHP; }
    }
    public int HP {
      get { return result.HP; }
      set { SetHP(value); }
    }
    public Builder SetHP(int value) {
      PrepareBuilder();
      result.hasHP = true;
      result.hP_ = value;
      return this;
    }
    public Builder ClearHP() {
      PrepareBuilder();
      result.hasHP = false;
      result.hP_ = 0;
      return this;
    }
    
    public bool HasMP {
      get { return result.hasMP; }
    }
    public int MP {
      get { return result.MP; }
      set { SetMP(value); }
    }
    public Builder SetMP(int value) {
      PrepareBuilder();
      result.hasMP = true;
      result.mP_ = value;
      return this;
    }
    public Builder ClearMP() {
      PrepareBuilder();
      result.hasMP = false;
      result.mP_ = 0;
      return this;
    }
  }
  static StatsDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SkillsDescription : pb::GeneratedMessage<SkillsDescription, SkillsDescription.Builder> {
  private SkillsDescription() { }
  private static readonly SkillsDescription defaultInstance = new SkillsDescription().MakeReadOnly();
  private static readonly string[] _skillsDescriptionFieldNames = new string[] { "AutoCast", "CoolDown", "Distance", "Name", "TextureId" };
  private static readonly uint[] _skillsDescriptionFieldTags = new uint[] { 40, 29, 37, 10, 16 };
  public static SkillsDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SkillsDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SkillsDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_SkillsDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SkillsDescription, SkillsDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_SkillsDescription__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int TextureIdFieldNumber = 2;
  private bool hasTextureId;
  private int textureId_;
  public bool HasTextureId {
    get { return hasTextureId; }
  }
  public int TextureId {
    get { return textureId_; }
  }
  
  public const int CoolDownFieldNumber = 3;
  private bool hasCoolDown;
  private float coolDown_;
  public bool HasCoolDown {
    get { return hasCoolDown; }
  }
  public float CoolDown {
    get { return coolDown_; }
  }
  
  public const int DistanceFieldNumber = 4;
  private bool hasDistance;
  private float distance_;
  public bool HasDistance {
    get { return hasDistance; }
  }
  public float Distance {
    get { return distance_; }
  }
  
  public const int AutoCastFieldNumber = 5;
  private bool hasAutoCast;
  private bool autoCast_;
  public bool HasAutoCast {
    get { return hasAutoCast; }
  }
  public bool AutoCast {
    get { return autoCast_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasTextureId) return false;
      if (!hasCoolDown) return false;
      if (!hasDistance) return false;
      if (!hasAutoCast) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _skillsDescriptionFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasTextureId) {
      output.WriteInt32(2, field_names[4], TextureId);
    }
    if (hasCoolDown) {
      output.WriteFloat(3, field_names[1], CoolDown);
    }
    if (hasDistance) {
      output.WriteFloat(4, field_names[2], Distance);
    }
    if (hasAutoCast) {
      output.WriteBool(5, field_names[0], AutoCast);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasTextureId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, TextureId);
      }
      if (hasCoolDown) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, CoolDown);
      }
      if (hasDistance) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Distance);
      }
      if (hasAutoCast) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, AutoCast);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static SkillsDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SkillsDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SkillsDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SkillsDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillsDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SkillsDescription MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SkillsDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SkillsDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SkillsDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SkillsDescription result;
    
    private SkillsDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        SkillsDescription original = result;
        result = new SkillsDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SkillsDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SkillsDescription.Descriptor; }
    }
    
    public override SkillsDescription DefaultInstanceForType {
      get { return global::SkillsDescription.DefaultInstance; }
    }
    
    public override SkillsDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SkillsDescription) {
        return MergeFrom((SkillsDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SkillsDescription other) {
      if (other == global::SkillsDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasTextureId) {
        TextureId = other.TextureId;
      }
      if (other.HasCoolDown) {
        CoolDown = other.CoolDown;
      }
      if (other.HasDistance) {
        Distance = other.Distance;
      }
      if (other.HasAutoCast) {
        AutoCast = other.AutoCast;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_skillsDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _skillsDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 16: {
            result.hasTextureId = input.ReadInt32(ref result.textureId_);
            break;
          }
          case 29: {
            result.hasCoolDown = input.ReadFloat(ref result.coolDown_);
            break;
          }
          case 37: {
            result.hasDistance = input.ReadFloat(ref result.distance_);
            break;
          }
          case 40: {
            result.hasAutoCast = input.ReadBool(ref result.autoCast_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasTextureId {
      get { return result.hasTextureId; }
    }
    public int TextureId {
      get { return result.TextureId; }
      set { SetTextureId(value); }
    }
    public Builder SetTextureId(int value) {
      PrepareBuilder();
      result.hasTextureId = true;
      result.textureId_ = value;
      return this;
    }
    public Builder ClearTextureId() {
      PrepareBuilder();
      result.hasTextureId = false;
      result.textureId_ = 0;
      return this;
    }
    
    public bool HasCoolDown {
      get { return result.hasCoolDown; }
    }
    public float CoolDown {
      get { return result.CoolDown; }
      set { SetCoolDown(value); }
    }
    public Builder SetCoolDown(float value) {
      PrepareBuilder();
      result.hasCoolDown = true;
      result.coolDown_ = value;
      return this;
    }
    public Builder ClearCoolDown() {
      PrepareBuilder();
      result.hasCoolDown = false;
      result.coolDown_ = 0F;
      return this;
    }
    
    public bool HasDistance {
      get { return result.hasDistance; }
    }
    public float Distance {
      get { return result.Distance; }
      set { SetDistance(value); }
    }
    public Builder SetDistance(float value) {
      PrepareBuilder();
      result.hasDistance = true;
      result.distance_ = value;
      return this;
    }
    public Builder ClearDistance() {
      PrepareBuilder();
      result.hasDistance = false;
      result.distance_ = 0F;
      return this;
    }
    
    public bool HasAutoCast {
      get { return result.hasAutoCast; }
    }
    public bool AutoCast {
      get { return result.AutoCast; }
      set { SetAutoCast(value); }
    }
    public Builder SetAutoCast(bool value) {
      PrepareBuilder();
      result.hasAutoCast = true;
      result.autoCast_ = value;
      return this;
    }
    public Builder ClearAutoCast() {
      PrepareBuilder();
      result.hasAutoCast = false;
      result.autoCast_ = false;
      return this;
    }
  }
  static SkillsDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerLoginPacket : pb::GeneratedMessage<PlayerLoginPacket, PlayerLoginPacket.Builder> {
  private PlayerLoginPacket() { }
  private static readonly PlayerLoginPacket defaultInstance = new PlayerLoginPacket().MakeReadOnly();
  private static readonly string[] _playerLoginPacketFieldNames = new string[] { "player" };
  private static readonly uint[] _playerLoginPacketFieldTags = new uint[] { 10 };
  public static PlayerLoginPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerLoginPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerLoginPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_PlayerLoginPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerLoginPacket, PlayerLoginPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_PlayerLoginPacket__FieldAccessorTable; }
  }
  
  public const int PlayerFieldNumber = 1;
  private bool hasPlayer;
  private global::PlayerDescription player_;
  public bool HasPlayer {
    get { return hasPlayer; }
  }
  public global::PlayerDescription Player {
    get { return player_ ?? global::PlayerDescription.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPlayer) return false;
      if (!Player.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerLoginPacketFieldNames;
    if (hasPlayer) {
      output.WriteMessage(1, field_names[0], Player);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayer) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerLoginPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerLoginPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerLoginPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerLoginPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerLoginPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerLoginPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerLoginPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerLoginPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerLoginPacket result;
    
    private PlayerLoginPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerLoginPacket original = result;
        result = new PlayerLoginPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerLoginPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerLoginPacket.Descriptor; }
    }
    
    public override PlayerLoginPacket DefaultInstanceForType {
      get { return global::PlayerLoginPacket.DefaultInstance; }
    }
    
    public override PlayerLoginPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerLoginPacket) {
        return MergeFrom((PlayerLoginPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerLoginPacket other) {
      if (other == global::PlayerLoginPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayer) {
        MergePlayer(other.Player);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerLoginPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerLoginPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::PlayerDescription.Builder subBuilder = global::PlayerDescription.CreateBuilder();
            if (result.hasPlayer) {
              subBuilder.MergeFrom(Player);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Player = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayer {
     get { return result.hasPlayer; }
    }
    public global::PlayerDescription Player {
      get { return result.Player; }
      set { SetPlayer(value); }
    }
    public Builder SetPlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = value;
      return this;
    }
    public Builder SetPlayer(global::PlayerDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayer &&
          result.player_ != global::PlayerDescription.DefaultInstance) {
          result.player_ = global::PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
      } else {
        result.player_ = value;
      }
      result.hasPlayer = true;
      return this;
    }
    public Builder ClearPlayer() {
      PrepareBuilder();
      result.hasPlayer = false;
      result.player_ = null;
      return this;
    }
  }
  static PlayerLoginPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerMovementPacket : pb::GeneratedMessage<PlayerMovementPacket, PlayerMovementPacket.Builder> {
  private PlayerMovementPacket() { }
  private static readonly PlayerMovementPacket defaultInstance = new PlayerMovementPacket().MakeReadOnly();
  private static readonly string[] _playerMovementPacketFieldNames = new string[] { "mapSlice", "newPosition" };
  private static readonly uint[] _playerMovementPacketFieldTags = new uint[] { 18, 10 };
  public static PlayerMovementPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerMovementPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerMovementPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_PlayerMovementPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerMovementPacket, PlayerMovementPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_PlayerMovementPacket__FieldAccessorTable; }
  }
  
  public const int NewPositionFieldNumber = 1;
  private bool hasNewPosition;
  private global::Position newPosition_;
  public bool HasNewPosition {
    get { return hasNewPosition; }
  }
  public global::Position NewPosition {
    get { return newPosition_ ?? global::Position.DefaultInstance; }
  }
  
  public const int MapSliceFieldNumber = 2;
  private bool hasMapSlice;
  private global::MapSliceDescription mapSlice_;
  public bool HasMapSlice {
    get { return hasMapSlice; }
  }
  public global::MapSliceDescription MapSlice {
    get { return mapSlice_ ?? global::MapSliceDescription.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasNewPosition) return false;
      if (!hasMapSlice) return false;
      if (!NewPosition.IsInitialized) return false;
      if (!MapSlice.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerMovementPacketFieldNames;
    if (hasNewPosition) {
      output.WriteMessage(1, field_names[1], NewPosition);
    }
    if (hasMapSlice) {
      output.WriteMessage(2, field_names[0], MapSlice);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNewPosition) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, NewPosition);
      }
      if (hasMapSlice) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, MapSlice);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerMovementPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerMovementPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerMovementPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerMovementPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerMovementPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerMovementPacket result;
    
    private PlayerMovementPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerMovementPacket original = result;
        result = new PlayerMovementPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerMovementPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerMovementPacket.Descriptor; }
    }
    
    public override PlayerMovementPacket DefaultInstanceForType {
      get { return global::PlayerMovementPacket.DefaultInstance; }
    }
    
    public override PlayerMovementPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerMovementPacket) {
        return MergeFrom((PlayerMovementPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerMovementPacket other) {
      if (other == global::PlayerMovementPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNewPosition) {
        MergeNewPosition(other.NewPosition);
      }
      if (other.HasMapSlice) {
        MergeMapSlice(other.MapSlice);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerMovementPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasNewPosition) {
              subBuilder.MergeFrom(NewPosition);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            NewPosition = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::MapSliceDescription.Builder subBuilder = global::MapSliceDescription.CreateBuilder();
            if (result.hasMapSlice) {
              subBuilder.MergeFrom(MapSlice);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MapSlice = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNewPosition {
     get { return result.hasNewPosition; }
    }
    public global::Position NewPosition {
      get { return result.NewPosition; }
      set { SetNewPosition(value); }
    }
    public Builder SetNewPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNewPosition = true;
      result.newPosition_ = value;
      return this;
    }
    public Builder SetNewPosition(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasNewPosition = true;
      result.newPosition_ = builderForValue.Build();
      return this;
    }
    public Builder MergeNewPosition(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasNewPosition &&
          result.newPosition_ != global::Position.DefaultInstance) {
          result.newPosition_ = global::Position.CreateBuilder(result.newPosition_).MergeFrom(value).BuildPartial();
      } else {
        result.newPosition_ = value;
      }
      result.hasNewPosition = true;
      return this;
    }
    public Builder ClearNewPosition() {
      PrepareBuilder();
      result.hasNewPosition = false;
      result.newPosition_ = null;
      return this;
    }
    
    public bool HasMapSlice {
     get { return result.hasMapSlice; }
    }
    public global::MapSliceDescription MapSlice {
      get { return result.MapSlice; }
      set { SetMapSlice(value); }
    }
    public Builder SetMapSlice(global::MapSliceDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMapSlice = true;
      result.mapSlice_ = value;
      return this;
    }
    public Builder SetMapSlice(global::MapSliceDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMapSlice = true;
      result.mapSlice_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMapSlice(global::MapSliceDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMapSlice &&
          result.mapSlice_ != global::MapSliceDescription.DefaultInstance) {
          result.mapSlice_ = global::MapSliceDescription.CreateBuilder(result.mapSlice_).MergeFrom(value).BuildPartial();
      } else {
        result.mapSlice_ = value;
      }
      result.hasMapSlice = true;
      return this;
    }
    public Builder ClearMapSlice() {
      PrepareBuilder();
      result.hasMapSlice = false;
      result.mapSlice_ = null;
      return this;
    }
  }
  static PlayerMovementPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MapSliceDescription : pb::GeneratedMessage<MapSliceDescription, MapSliceDescription.Builder> {
  private MapSliceDescription() { }
  private static readonly MapSliceDescription defaultInstance = new MapSliceDescription().MakeReadOnly();
  private static readonly string[] _mapSliceDescriptionFieldNames = new string[] { "endX", "endY", "startX", "startY", "tiles" };
  private static readonly uint[] _mapSliceDescriptionFieldTags = new uint[] { 16, 32, 8, 24, 42 };
  public static MapSliceDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MapSliceDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MapSliceDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_MapSliceDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MapSliceDescription, MapSliceDescription.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_MapSliceDescription__FieldAccessorTable; }
  }
  
  public const int StartXFieldNumber = 1;
  private bool hasStartX;
  private int startX_;
  public bool HasStartX {
    get { return hasStartX; }
  }
  public int StartX {
    get { return startX_; }
  }
  
  public const int EndXFieldNumber = 2;
  private bool hasEndX;
  private int endX_;
  public bool HasEndX {
    get { return hasEndX; }
  }
  public int EndX {
    get { return endX_; }
  }
  
  public const int StartYFieldNumber = 3;
  private bool hasStartY;
  private int startY_;
  public bool HasStartY {
    get { return hasStartY; }
  }
  public int StartY {
    get { return startY_; }
  }
  
  public const int EndYFieldNumber = 4;
  private bool hasEndY;
  private int endY_;
  public bool HasEndY {
    get { return hasEndY; }
  }
  public int EndY {
    get { return endY_; }
  }
  
  public const int TilesFieldNumber = 5;
  private pbc::PopsicleList<global::TileDescription> tiles_ = new pbc::PopsicleList<global::TileDescription>();
  public scg::IList<global::TileDescription> TilesList {
    get { return tiles_; }
  }
  public int TilesCount {
    get { return tiles_.Count; }
  }
  public global::TileDescription GetTiles(int index) {
    return tiles_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStartX) return false;
      if (!hasEndX) return false;
      if (!hasStartY) return false;
      if (!hasEndY) return false;
      foreach (global::TileDescription element in TilesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _mapSliceDescriptionFieldNames;
    if (hasStartX) {
      output.WriteInt32(1, field_names[2], StartX);
    }
    if (hasEndX) {
      output.WriteInt32(2, field_names[0], EndX);
    }
    if (hasStartY) {
      output.WriteInt32(3, field_names[3], StartY);
    }
    if (hasEndY) {
      output.WriteInt32(4, field_names[1], EndY);
    }
    if (tiles_.Count > 0) {
      output.WriteMessageArray(5, field_names[4], tiles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStartX) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, StartX);
      }
      if (hasEndX) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, EndX);
      }
      if (hasStartY) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, StartY);
      }
      if (hasEndY) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, EndY);
      }
      foreach (global::TileDescription element in TilesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MapSliceDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MapSliceDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MapSliceDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MapSliceDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MapSliceDescription MakeReadOnly() {
    tiles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MapSliceDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MapSliceDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MapSliceDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MapSliceDescription result;
    
    private MapSliceDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        MapSliceDescription original = result;
        result = new MapSliceDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MapSliceDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MapSliceDescription.Descriptor; }
    }
    
    public override MapSliceDescription DefaultInstanceForType {
      get { return global::MapSliceDescription.DefaultInstance; }
    }
    
    public override MapSliceDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MapSliceDescription) {
        return MergeFrom((MapSliceDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MapSliceDescription other) {
      if (other == global::MapSliceDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStartX) {
        StartX = other.StartX;
      }
      if (other.HasEndX) {
        EndX = other.EndX;
      }
      if (other.HasStartY) {
        StartY = other.StartY;
      }
      if (other.HasEndY) {
        EndY = other.EndY;
      }
      if (other.tiles_.Count != 0) {
        result.tiles_.Add(other.tiles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_mapSliceDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _mapSliceDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasStartX = input.ReadInt32(ref result.startX_);
            break;
          }
          case 16: {
            result.hasEndX = input.ReadInt32(ref result.endX_);
            break;
          }
          case 24: {
            result.hasStartY = input.ReadInt32(ref result.startY_);
            break;
          }
          case 32: {
            result.hasEndY = input.ReadInt32(ref result.endY_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.tiles_, global::TileDescription.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStartX {
      get { return result.hasStartX; }
    }
    public int StartX {
      get { return result.StartX; }
      set { SetStartX(value); }
    }
    public Builder SetStartX(int value) {
      PrepareBuilder();
      result.hasStartX = true;
      result.startX_ = value;
      return this;
    }
    public Builder ClearStartX() {
      PrepareBuilder();
      result.hasStartX = false;
      result.startX_ = 0;
      return this;
    }
    
    public bool HasEndX {
      get { return result.hasEndX; }
    }
    public int EndX {
      get { return result.EndX; }
      set { SetEndX(value); }
    }
    public Builder SetEndX(int value) {
      PrepareBuilder();
      result.hasEndX = true;
      result.endX_ = value;
      return this;
    }
    public Builder ClearEndX() {
      PrepareBuilder();
      result.hasEndX = false;
      result.endX_ = 0;
      return this;
    }
    
    public bool HasStartY {
      get { return result.hasStartY; }
    }
    public int StartY {
      get { return result.StartY; }
      set { SetStartY(value); }
    }
    public Builder SetStartY(int value) {
      PrepareBuilder();
      result.hasStartY = true;
      result.startY_ = value;
      return this;
    }
    public Builder ClearStartY() {
      PrepareBuilder();
      result.hasStartY = false;
      result.startY_ = 0;
      return this;
    }
    
    public bool HasEndY {
      get { return result.hasEndY; }
    }
    public int EndY {
      get { return result.EndY; }
      set { SetEndY(value); }
    }
    public Builder SetEndY(int value) {
      PrepareBuilder();
      result.hasEndY = true;
      result.endY_ = value;
      return this;
    }
    public Builder ClearEndY() {
      PrepareBuilder();
      result.hasEndY = false;
      result.endY_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::TileDescription> TilesList {
      get { return PrepareBuilder().tiles_; }
    }
    public int TilesCount {
      get { return result.TilesCount; }
    }
    public global::TileDescription GetTiles(int index) {
      return result.GetTiles(index);
    }
    public Builder SetTiles(int index, global::TileDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tiles_[index] = value;
      return this;
    }
    public Builder SetTiles(int index, global::TileDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tiles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTiles(global::TileDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tiles_.Add(value);
      return this;
    }
    public Builder AddTiles(global::TileDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tiles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTiles(scg::IEnumerable<global::TileDescription> values) {
      PrepareBuilder();
      result.tiles_.Add(values);
      return this;
    }
    public Builder ClearTiles() {
      PrepareBuilder();
      result.tiles_.Clear();
      return this;
    }
  }
  static MapSliceDescription() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterMovementPacket : pb::GeneratedMessage<CharacterMovementPacket, CharacterMovementPacket.Builder> {
  private CharacterMovementPacket() { }
  private static readonly CharacterMovementPacket defaultInstance = new CharacterMovementPacket().MakeReadOnly();
  private static readonly string[] _characterMovementPacketFieldNames = new string[] { "player" };
  private static readonly uint[] _characterMovementPacketFieldTags = new uint[] { 10 };
  public static CharacterMovementPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterMovementPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterMovementPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_CharacterMovementPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterMovementPacket, CharacterMovementPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_CharacterMovementPacket__FieldAccessorTable; }
  }
  
  public const int PlayerFieldNumber = 1;
  private bool hasPlayer;
  private global::PlayerDescription player_;
  public bool HasPlayer {
    get { return hasPlayer; }
  }
  public global::PlayerDescription Player {
    get { return player_ ?? global::PlayerDescription.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPlayer) return false;
      if (!Player.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _characterMovementPacketFieldNames;
    if (hasPlayer) {
      output.WriteMessage(1, field_names[0], Player);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayer) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CharacterMovementPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterMovementPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterMovementPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterMovementPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterMovementPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterMovementPacket result;
    
    private CharacterMovementPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterMovementPacket original = result;
        result = new CharacterMovementPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterMovementPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterMovementPacket.Descriptor; }
    }
    
    public override CharacterMovementPacket DefaultInstanceForType {
      get { return global::CharacterMovementPacket.DefaultInstance; }
    }
    
    public override CharacterMovementPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterMovementPacket) {
        return MergeFrom((CharacterMovementPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterMovementPacket other) {
      if (other == global::CharacterMovementPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayer) {
        MergePlayer(other.Player);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterMovementPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::PlayerDescription.Builder subBuilder = global::PlayerDescription.CreateBuilder();
            if (result.hasPlayer) {
              subBuilder.MergeFrom(Player);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Player = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayer {
     get { return result.hasPlayer; }
    }
    public global::PlayerDescription Player {
      get { return result.Player; }
      set { SetPlayer(value); }
    }
    public Builder SetPlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = value;
      return this;
    }
    public Builder SetPlayer(global::PlayerDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayer = true;
      result.player_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayer(global::PlayerDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayer &&
          result.player_ != global::PlayerDescription.DefaultInstance) {
          result.player_ = global::PlayerDescription.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
      } else {
        result.player_ = value;
      }
      result.hasPlayer = true;
      return this;
    }
    public Builder ClearPlayer() {
      PrepareBuilder();
      result.hasPlayer = false;
      result.player_ = null;
      return this;
    }
  }
  static CharacterMovementPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CreatureMovementPacket : pb::GeneratedMessage<CreatureMovementPacket, CreatureMovementPacket.Builder> {
  private CreatureMovementPacket() { }
  private static readonly CreatureMovementPacket defaultInstance = new CreatureMovementPacket().MakeReadOnly();
  private static readonly string[] _creatureMovementPacketFieldNames = new string[] { "creature" };
  private static readonly uint[] _creatureMovementPacketFieldTags = new uint[] { 10 };
  public static CreatureMovementPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CreatureMovementPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CreatureMovementPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_CreatureMovementPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CreatureMovementPacket, CreatureMovementPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_CreatureMovementPacket__FieldAccessorTable; }
  }
  
  public const int CreatureFieldNumber = 1;
  private bool hasCreature;
  private global::CreatureDescription creature_;
  public bool HasCreature {
    get { return hasCreature; }
  }
  public global::CreatureDescription Creature {
    get { return creature_ ?? global::CreatureDescription.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCreature) return false;
      if (!Creature.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _creatureMovementPacketFieldNames;
    if (hasCreature) {
      output.WriteMessage(1, field_names[0], Creature);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCreature) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Creature);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CreatureMovementPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CreatureMovementPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CreatureMovementPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CreatureMovementPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CreatureMovementPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CreatureMovementPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CreatureMovementPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CreatureMovementPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CreatureMovementPacket result;
    
    private CreatureMovementPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        CreatureMovementPacket original = result;
        result = new CreatureMovementPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CreatureMovementPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CreatureMovementPacket.Descriptor; }
    }
    
    public override CreatureMovementPacket DefaultInstanceForType {
      get { return global::CreatureMovementPacket.DefaultInstance; }
    }
    
    public override CreatureMovementPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CreatureMovementPacket) {
        return MergeFrom((CreatureMovementPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CreatureMovementPacket other) {
      if (other == global::CreatureMovementPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCreature) {
        MergeCreature(other.Creature);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_creatureMovementPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _creatureMovementPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CreatureDescription.Builder subBuilder = global::CreatureDescription.CreateBuilder();
            if (result.hasCreature) {
              subBuilder.MergeFrom(Creature);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Creature = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCreature {
     get { return result.hasCreature; }
    }
    public global::CreatureDescription Creature {
      get { return result.Creature; }
      set { SetCreature(value); }
    }
    public Builder SetCreature(global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreature = true;
      result.creature_ = value;
      return this;
    }
    public Builder SetCreature(global::CreatureDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCreature = true;
      result.creature_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCreature(global::CreatureDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCreature &&
          result.creature_ != global::CreatureDescription.DefaultInstance) {
          result.creature_ = global::CreatureDescription.CreateBuilder(result.creature_).MergeFrom(value).BuildPartial();
      } else {
        result.creature_ = value;
      }
      result.hasCreature = true;
      return this;
    }
    public Builder ClearCreature() {
      PrepareBuilder();
      result.hasCreature = false;
      result.creature_ = null;
      return this;
    }
  }
  static CreatureMovementPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Messages : pb::GeneratedMessage<Messages, Messages.Builder> {
  private Messages() { }
  private static readonly Messages defaultInstance = new Messages().MakeReadOnly();
  private static readonly string[] _messagesFieldNames = new string[] { "Networkmessage" };
  private static readonly uint[] _messagesFieldTags = new uint[] { 10 };
  public static Messages DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Messages DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Messages ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_Messages__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Messages, Messages.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_Messages__FieldAccessorTable; }
  }
  
  public const int NetworkmessageFieldNumber = 1;
  private pbc::PopsicleList<global::Networkmessage> networkmessage_ = new pbc::PopsicleList<global::Networkmessage>();
  public scg::IList<global::Networkmessage> NetworkmessageList {
    get { return networkmessage_; }
  }
  public int NetworkmessageCount {
    get { return networkmessage_.Count; }
  }
  public global::Networkmessage GetNetworkmessage(int index) {
    return networkmessage_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Networkmessage element in NetworkmessageList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _messagesFieldNames;
    if (networkmessage_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], networkmessage_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Networkmessage element in NetworkmessageList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Messages ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Messages ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Messages ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Messages ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Messages ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Messages ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Messages ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Messages ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Messages ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Messages ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Messages MakeReadOnly() {
    networkmessage_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Messages prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Messages, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Messages cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Messages result;
    
    private Messages PrepareBuilder() {
      if (resultIsReadOnly) {
        Messages original = result;
        result = new Messages();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Messages MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Messages.Descriptor; }
    }
    
    public override Messages DefaultInstanceForType {
      get { return global::Messages.DefaultInstance; }
    }
    
    public override Messages BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Messages) {
        return MergeFrom((Messages) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Messages other) {
      if (other == global::Messages.DefaultInstance) return this;
      PrepareBuilder();
      if (other.networkmessage_.Count != 0) {
        result.networkmessage_.Add(other.networkmessage_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_messagesFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _messagesFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.networkmessage_, global::Networkmessage.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Networkmessage> NetworkmessageList {
      get { return PrepareBuilder().networkmessage_; }
    }
    public int NetworkmessageCount {
      get { return result.NetworkmessageCount; }
    }
    public global::Networkmessage GetNetworkmessage(int index) {
      return result.GetNetworkmessage(index);
    }
    public Builder SetNetworkmessage(int index, global::Networkmessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.networkmessage_[index] = value;
      return this;
    }
    public Builder SetNetworkmessage(int index, global::Networkmessage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.networkmessage_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddNetworkmessage(global::Networkmessage value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.networkmessage_.Add(value);
      return this;
    }
    public Builder AddNetworkmessage(global::Networkmessage.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.networkmessage_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeNetworkmessage(scg::IEnumerable<global::Networkmessage> values) {
      PrepareBuilder();
      result.networkmessage_.Add(values);
      return this;
    }
    public Builder ClearNetworkmessage() {
      PrepareBuilder();
      result.networkmessage_.Clear();
      return this;
    }
  }
  static Messages() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerLogoutPacket : pb::GeneratedMessage<PlayerLogoutPacket, PlayerLogoutPacket.Builder> {
  private PlayerLogoutPacket() { }
  private static readonly PlayerLogoutPacket defaultInstance = new PlayerLogoutPacket().MakeReadOnly();
  private static readonly string[] _playerLogoutPacketFieldNames = new string[] { "playerGuid" };
  private static readonly uint[] _playerLogoutPacketFieldTags = new uint[] { 10 };
  public static PlayerLogoutPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerLogoutPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerLogoutPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Proto.Networkmessage.internal__static_PlayerLogoutPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerLogoutPacket, PlayerLogoutPacket.Builder> InternalFieldAccessors {
    get { return global::Proto.Networkmessage.internal__static_PlayerLogoutPacket__FieldAccessorTable; }
  }
  
  public const int PlayerGuidFieldNumber = 1;
  private bool hasPlayerGuid;
  private string playerGuid_ = "";
  public bool HasPlayerGuid {
    get { return hasPlayerGuid; }
  }
  public string PlayerGuid {
    get { return playerGuid_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPlayerGuid) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerLogoutPacketFieldNames;
    if (hasPlayerGuid) {
      output.WriteString(1, field_names[0], PlayerGuid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayerGuid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, PlayerGuid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerLogoutPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerLogoutPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerLogoutPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerLogoutPacket MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerLogoutPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerLogoutPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerLogoutPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerLogoutPacket result;
    
    private PlayerLogoutPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerLogoutPacket original = result;
        result = new PlayerLogoutPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerLogoutPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerLogoutPacket.Descriptor; }
    }
    
    public override PlayerLogoutPacket DefaultInstanceForType {
      get { return global::PlayerLogoutPacket.DefaultInstance; }
    }
    
    public override PlayerLogoutPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerLogoutPacket) {
        return MergeFrom((PlayerLogoutPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerLogoutPacket other) {
      if (other == global::PlayerLogoutPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerGuid) {
        PlayerGuid = other.PlayerGuid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerLogoutPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerLogoutPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPlayerGuid = input.ReadString(ref result.playerGuid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerGuid {
      get { return result.hasPlayerGuid; }
    }
    public string PlayerGuid {
      get { return result.PlayerGuid; }
      set { SetPlayerGuid(value); }
    }
    public Builder SetPlayerGuid(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerGuid = true;
      result.playerGuid_ = value;
      return this;
    }
    public Builder ClearPlayerGuid() {
      PrepareBuilder();
      result.hasPlayerGuid = false;
      result.playerGuid_ = "";
      return this;
    }
  }
  static PlayerLogoutPacket() {
    object.ReferenceEquals(global::Proto.Networkmessage.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
